<<<<<<< HEAD
source("subFxs/loadFxs.R") # load scheduledWait from empirical data
source("subFxs/analysisFxs.R")
# modelName
modelName = "RL2"
repFun = getRepFun(modelName)
# load expData
=======
for(sIdx in 1 : nSub){
# prepare inputs
id = useID[[sIdx]]
nTrial = summaryData$nTrial[summaryData$id == id]
label = sprintf("sub%d", id)
kmOnGridMatrix = matrix(NA, nrow = length(kmGrid), ncol = nComb)
for(cIdx in 1 : nComb){
thisRepTrialData = repTrialData[[repNo[cIdx, which(ids == id)]]]
for(bkIdx in 1 : 2){
noIdx = sIdx * 2 - 2 + bkIdx
startIdx = min(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
endIdx = max(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
kmscResults = kmsc(truncateTrials(thisRepTrialData, startIdx, endIdx), min(tMaxs), label ,plotKMSC, kmGrid)
AUCRep_[cIdx,noIdx] = kmscResults[['auc']]
stdWdRep_[cIdx, noIdx] = kmscResults$stdWd
kmOnGridMatrix[,cIdx] = kmscResults$kmOnGrid
}
}
kmOnGridRep_[[noIdx]] = kmOnGridMatrix
}
# compare emipirical and reproduced AUC
muAUCRep = apply(AUCRep_, MARGIN = 2, mean);stdAUCRep = apply(AUCRep_, MARGIN = 2, sd)
minAUCRep = muAUCRep - stdAUCRep;maxAUCRep = muAUCRep + stdAUCRep
muStdWdRep = apply(stdWdRep_, MARGIN = 2, mean);stdStdWdRep = apply(stdWdRep_, MARGIN = 2, sd)
minStdWdRep = muStdWdRep - stdStdWdRep;maxStdWdRep = muStdWdRep + stdStdWdRep
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWD = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(AUC, muAUCRep)) +  geom_errorbar(aes(ymin = minAUCRep, ymax = maxAUCRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 22)) + ylim(c(-2, 22)) +
ylab("Model-generated (s)") + xlab("Observed (s)") + ggtitle(sprintf("Average WTW, n = %d", length(useID))) +
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/AUC_AUCRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWD = summaryData$stdWd[summaryData$id %in% useID],
blockNum = summaryData$blockNum[summaryData$id %in% useID]) %>%
ggplot(aes(AUC, muAUCRep)) +  geom_errorbar(aes(ymin = minAUCRep, ymax = maxAUCRep), color = "grey") +
geom_point(size = 2) + facet_grid(~blockNum) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 22)) + ylim(c(-2, 22)) +
ylab("Model-generated (s)") + xlab("Observed (s)") + ggtitle(sprintf("Average WTW, n = %d", length(useID))) +
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/AUC_AUCRep2.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# I don't know
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
blockNum = summaryData$blockNum[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~blockNum) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep2.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# compare emipircal and reproduced trialPlot, for one participant
id = 1
sIdx = which(useID  == id)
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
ggsave(sprintf("figures/expModelRepitation/%s/actual_data_%d.png", modelName, id),
width = 5, height = 4)
with(thisRep,{
id = 1
sIdx = which(useID  == id)
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data__%d.png", modelName, id),
width = 5, height = 4)
})
repNo[1,sIdx]
sIdx = which(useID  == id)
useID
with(thisRep,{
id = 461
sIdx = which(useID  == id)
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data__%d.png", modelName, id),
width = 5, height = 4)
})
useID
# compare emipircal and reproduced trialPlot, for one participant
id = 478
sIdx = which(useID  == id)
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
ggsave(sprintf("figures/expModelRepitation/%s/actual_data_%d.png", modelName, id),
width = 5, height = 4)
with(thisRep,{
id = 478
sIdx = which(useID  == id)
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data__%d.png", modelName, id),
width = 5, height = 4)
})
id = 478
sIdx = which(useID  == id)
sIdx
modelName
# determine repFun
repFun = getRepFun(modelName)
repFun
id = 478
sIdx = which(useID  == id)
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
id = 478
sIdx = which(useID  == id)
tempt = repTrialData[[repNo[2,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
modelName
paras
useID
# compare emipircal and reproduced trialPlot, for one participant
id = 531
sIdx = which(useID  == id)
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
useID
str(trialData)
sIdx = 3
id = useID[sIdx]
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
with(thisRep,{
sIdx = 3
id = useID[sIdx]
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data__%d.png", modelName, id),
width = 5, height = 4)
})
id
with(thisRep,{
sIdx = 3
id = useID[sIdx]
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data__%d.png", modelName, id),
width = 5, height = 4)
})
sIdx = 3
id = useID[sIdx]
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
ggsave(sprintf("figures/expModelRepitation/%s/actual_data_%s.png", modelName, id),
width = 5, height = 4)
with(thisRep,{
sIdx = 3
id = useID[sIdx]
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data_%s.png", modelName, id),
width = 5, height = 4)
})
source('~/Documents/first_kick/wtw_timing/expModelRepitation.R', echo=TRUE)
expModelRepitation("RL1")
expModelRepitation("RL2")
source('~/Documents/first_kick/wtw_SDG_brandNew/simModelFittingdb.R', echo=TRUE)
source('~/Documents/first_kick/wtw_timing/expModelRepitation.R', echo=TRUE)
expModelRepitation("RL1")
getwd()
modelName = "RL1"
isTrun = T
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
source("subFxs/helpFxs.R") # getPars
source("subFxs/loadFxs.R") # load  expPara
source("subFxs/taskFxs.R") # drawSamples
source("subFxs/repetitionFxs.R") # getRepFunction
source("subFxs/analysisFxs.R") # kmsc, trialPlot
# load summaryData
nBlock = 2
nComb = 10
load("genData/expDataAnalysis/blockData.RData")
load("genData/expDataAnalysis/kmOnGridBlock.RData")
summaryData = blockData
# load trialData since we need scheduledWait
>>>>>>> a862a6654821565fdc0943dfc57cf2b0aae54037
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
# re-simulate data
dir.create("figures/expModelRepitation")
dir.create(sprintf("figures/expModelRepitation/%s",modelName))
thisRep = modelRepitation(modelName, summaryData, trialData, nComb) # set seeds indise
# initialize
expPara = thisRep$expPara
View(expPara)
repTrialData = thisRep$repTrialData
paraNames = getParaNames(modelName)
useID = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
repNo = thisRep$repNo
nSub =(length(useID))
AUCRep_ = matrix(NA, nrow = nComb , ncol = nSub * nBlock)
stdWdRep_ = matrix(NA, nrow = nComb, ncol = nSub * nBlock)
kmOnGridRep_ = vector(mode = "list", length = nSub * nBlock)
plotKMSC = F
for(sIdx in 1 : nSub){
# prepare inputs
id = useID[[sIdx]]
nTrial = summaryData$nTrial[summaryData$id == id]
label = sprintf("sub%d", id)
kmOnGridMatrix = matrix(NA, nrow = length(kmGrid), ncol = nComb)
for(cIdx in 1 : nComb){
thisRepTrialData = repTrialData[[repNo[cIdx, which(ids == id)]]]
for(bkIdx in 1 : 2){
noIdx = sIdx * 2 - 2 + bkIdx
startIdx = min(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
endIdx = max(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
kmscResults = kmsc(truncateTrials(thisRepTrialData, startIdx, endIdx), min(tMaxs), label ,plotKMSC, kmGrid)
AUCRep_[cIdx,noIdx] = kmscResults[['auc']]
stdWdRep_[cIdx, noIdx] = kmscResults$stdWd
kmOnGridMatrix[,cIdx] = kmscResults$kmOnGrid
}
}
kmOnGridRep_[[noIdx]] = kmOnGridMatrix
}
# compare emipirical and reproduced AUC
muAUCRep = apply(AUCRep_, MARGIN = 2, mean);stdAUCRep = apply(AUCRep_, MARGIN = 2, sd)
minAUCRep = muAUCRep - stdAUCRep;maxAUCRep = muAUCRep + stdAUCRep
muStdWdRep = apply(stdWdRep_, MARGIN = 2, mean);stdStdWdRep = apply(stdWdRep_, MARGIN = 2, sd)
minStdWdRep = muStdWdRep - stdStdWdRep;maxStdWdRep = muStdWdRep + stdStdWdRep
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWD = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(AUC, muAUCRep)) +  geom_errorbar(aes(ymin = minAUCRep, ymax = maxAUCRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 22)) + ylim(c(-2, 22)) +
ylab("Model-generated (s)") + xlab("Observed (s)") + ggtitle(sprintf("Average WTW, n = %d", length(useID))) +
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/AUC_AUCRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# I don't know
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
sIdx = 3
id = useID[sIdx]
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
ggsave(sprintf("figures/expModelRepitation/%s/actual_data_%s.png", modelName, id),
width = 5, height = 4)
with(thisRep,{
sIdx = 3
id = useID[sIdx]
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data_%s.png", modelName, id),
width = 5, height = 4)
})
}
expModelRepitation("QL1")
expModelRepitation("QL2")
# libraries and scripts
library("stringr")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
source("subFxs/modelComparisonFxs.R")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
# load model names
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
load("genData/expDataAnalysis/blockData.RData")
# select common useID
idList = hdrData$ID
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
useID_ = vector(mode = "list", length = nModel)
source("subFxs/loadFxs.R")
for(i in 1 : nModel){
modelName = modelNames[i]
paraNames = getParaNames(modelName)
expPara = loadExpPara(paraNames, sprintf("genData/simModelFitting/%sdb", modelName))
useID_[[i]] = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
}
useID = idList[apply(sapply(1 : nModel, function(i )idList %in% useID_[[i]]), MARGIN = 1,
all)]
nUse = length(useID)
# libraries and scripts
library("stringr")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
source("subFxs/modelComparisonFxs.R")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
# load model names
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
load("genData/expDataAnalysis/blockData.RData")
# select common useID
idList = hdrData$ID
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
useID_ = vector(mode = "list", length = nModel)
source("subFxs/loadFxs.R")
for(i in 1 : nModel){
modelName = modelNames[i]
paraNames = getParaNames(modelName)
expPara = loadExpPara(paraNames, sprintf("genData/simModelFitting/%sdb", modelName))
useID_[[i]] = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
}
useID = idList[apply(sapply(1 : nModel, function(i )idList %in% useID_[[i]]), MARGIN = 1,
all)]
nUse = length(useID)
useID
nUse
# extract logEvidece_ from loo
logEvidence_ = matrix(NA, nUse, nModel)
logLik_ = matrix(NA, nUse, nModel)
pWaic_ = matrix(NA, nUse, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
for(sIdx in 1 : nUse ){
id = useID[sIdx]
fileName = sprintf("genData/simModelFitting/%sdb/s%s_waic.RData", modelName, id)
load(fileName)
logEvidence_[sIdx, m] = WAIC$elpd_waic # here is like loglikelyhood, larger the better
logLik_[sIdx, m] = WAIC$elpd_waic  + WAIC$p_waic / 2
pWaic_[sIdx, m] = WAIC$p_waic
}
}
<<<<<<< HEAD
# enter the refit stage
nLoop = 1
i= 1
# determine excID
expPara = loadExpPara(paraNames,
sprintf("genData/expModelFitting/%sdb", modelName))
# determine excID
expPara = loadExpPara(paraNames,
sprintf("genData/expModelFitting/%sdb", modelName))
useID = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
excID = ids[!ids %in% useID]
length(useID)
source('~/Documents/first_kick/wtw_timing/simuation.R', echo=TRUE)
load("/Users/cyx/Documents/first_kick/wtw_timing/genData/simulation/simTrialData.RData")
View(simTrialData)
# libraries and scripts
library("stringr")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
source("subFxs/modelComparisonFxs.R")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
# load model names
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
load("genData/expDataAnalysis/blockData.RData")
# select common useID
idList = hdrData$ID
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
useID_ = vector(mode = "list", length = nModel)
source("subFxs/loadFxs.R")
xtract logEvidence, cross validation
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
ids = hdrData$ID
nSub = length(ids)
nFold = 10
logEvidence = matrix(nrow = length(ids), ncol= nModel)
logEvidenceTrain = list(length = nModel)
for(mIdx in 1 : nModel){
modelName = modelNames[mIdx]
paraNames = getParaNames(modelName)
nPara = length(paraNames)
likFun = getLikFun(modelName)
thisLogEvidenceTrain = matrix(nrow = nFold, ncol = nSub)
for(sIdx in 1 : nSub){
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%d.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
timeWaited = pmin(thisTrialData$timeWaited, max(tMaxs))
Ts = round(ceiling(timeWaited / stepDuration) + 1)
scheduledWait = thisTrialData$scheduledWait
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%d_f[0-9]{1,2}_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
if(length(getUseID(cvPara, paraNames)) == 10){
for(f in 1 : nFold){
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
thisLogEvidenceTrain[f, sIdx] = sum(sapply(1 : length(trialsTrain), function(i){
trial = trialsTrain[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
}
logEvidence[sIdx, mIdx] = sum(LL_)
logEvidenceTrain[[mIdx]] = thisLogEvidenceTrain
}
}
}
select = apply(sapply(1 : nModel, function(i) !is.na(logEvidence[,i])), MARGIN = 1, FUN = all)
useID = ids[select]
nUse = length(useID)
output = data.frame(cvLik = logEvidence[select,])
f= "genData/expModelFitting/logEvidenceListCV.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
=======
d
d
# save output for modelComparision
output = data.frame(logEvidence_)
f= "genData/simModelFitting/logEvidenceList.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
# participants best desribed by
library("ggpubr")
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
>>>>>>> a862a6654821565fdc0943dfc57cf2b0aae54037
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
<<<<<<< HEAD
dir.create("figures/expModelComparison")
ggsave("figures/expModelComparison/CV_nBest.png", width = 5, height =3.5)
i = 1
sIdx = 1
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%d.RData", id))
thisTrialData = trialData[[id]]
mkIdx = 1
modelName = modelNames[mIdx]
paraNames = getParaNames(modelName)
nPara = length(paraNames)
likFun = getLikFun(modelName)
thisLogEvidenceTrain = matrix(nrow = nFold, ncol = nSub)
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%d.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
timeWaited = pmin(thisTrialData$timeWaited, max(tMaxs))
Ts = round(ceiling(timeWaited / stepDuration) + 1)
scheduledWait = thisTrialData$scheduledWait
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%d_f[0-9]{1,2}_summary.txt", id))
View(cvPara)
mIdx = 1
modelName = modelNames[mIdx]
modelName
paraNames = getParaNames(modelName)
nPara = length(paraNames)
paraNames
likFun = getLikFun(modelName)
likFun = getLikFun(modelName)
thisLogEvidenceTrain = matrix(nrow = nFold, ncol = nSub)
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%d.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
timeWaited = pmin(thisTrialData$timeWaited, max(tMaxs))
Ts = round(ceiling(timeWaited / stepDuration) + 1)
scheduledWait = thisTrialData$scheduledWait
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%d_f[0-9]{1,2}_summary.txt", id))
View(cvPara)
partTable
source('~/Documents/first_kick/wtw_varying_outcome/subFxs/repetitionFxs.R', echo=TRUE)
source('~/Documents/first_kick/wtw_varying_outcome/subFxs/analysisFxs.R', echo=TRUE)
trialPlots(thisTrialData)
trialPlots(block2session(thisTrialData))
trialPlots(block2session(thisTrialData[thisTrialData$trialNum %in% partTable[-1,]]))
thisTrialData$trialNum
trialPlots(block2session(thisTrialData[1 : (thisTrialData$trialNum) %in% partTable[-1,],]))
trialPlots(block2session(thisTrialData[1 : (thisTrialData$trialNum) %in% partTable[-6,],]))
trialPlots(block2session(thisTrialData[1 : (thisTrialData$trialNum) %in% partTable[-6,],]))
a =
thisTrialData[1 : (thisTrialData$trialNum) %in% partTable[-6,],])
thisTrialData[1 : (thisTrialData$trialNum) %in% partTable[-6,],]
trialPlots(block2session(
thisTrialData[(1 : nrow(thisTrialData$trialNum)) %in% partTable[-6,],]))
trialPlots(block2session(
thisTrialData[(1 : nrow(thisTrialData$trialNum)) %in% partTable[-6,],]))
(1 : nrow(thisTrialData$trialNum))
trialPlots(block2session(
thisTrialData[(1 : nrow(thisTrialData$blockNum)) %in% partTable[-6,],]))
a =  thisTrialData[(1 : nrow(thisTrialData$blockNum)) %in% partTable[-6,],]
nrow(thisTrialData$blockNum
)
trialPlots(block2session(
thisTrialData[(1 : length(thisTrialData$blockNum)) %in% partTable[-6,],]))
trialPlots(block2session(
thisTrialData[(1 : length(thisTrialData$blockNum)) %in% partTable[-7,],]))
thisLogEvidenceTrain[6,1]
a = logEvidenceTrain[[1]]
dim(a)
a[,1]
View(cvPara)
modelName = "QL1"
# model fitting parameters
nFold = 10
# create outfiles
dir.create("genData")
dir.create("genData/expModelFittingCV")
dir.create(sprintf("genData/expModelFittingCV/%s", modelName))
#load libraries
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan')
library("loo")
library("coda")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
source("subFxs/analysisFxs.R")
#  set the environment for Rstan
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
idList = hdrData$ID
n = length(idList)
# determine paraNames
paraNames = getParaNames(modelName)
if(paraNames == "wrong model name"){
print(paraNames)
break
}
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
set.seed(123)
i = 1
thisID = idList[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# determine partitions
load(sprintf("genData/expModelFittingCV/split/s%d.RData", thisID))
# loop
for(j in 1 : nFold){
select = as.vector(partTable[-j,])
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%s/s%d_f%d", modelName, thisID, j)
modelFittingCV(thisTrialData, fileName, paraNames, model, modelName)
}
j = 1
select = as.vector(partTable[-j,])
j = 7
select = as.vector(partTable[-j,])
select
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
plot(block2session(thisTrialData))
trialPlots(block2session(thisTrialData))
graphics.off()
trialPlots(block2session(thisTrialData))
fileName = sprintf("genData/expModelFittingCV/%s/s%d_f%d", modelName, thisID, j)
# compile the stan model
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
#
load("wtwSettings.RData")
# simulation parameters
nChain = 4
nIter = 100
# determine wIni, the first change
subOptimalRatio = 0.9
if(any(paraNames  == "gamma") || modelName == "BL" ){
wIni = mean(as.double(optimRewardRates)) * stepDuration / (1 - 0.9) * subOptimalRatio
}else{
wIni = mean(as.double(optimRewardRates)) * stepDuration * subOptimalRatio
}
# prepare input
timeWaited = thisTrialData$timeWaited
wIni
# prepare input
timeWaited = thisTrialData$timeWaited
scheduledWait = thisTrialData$scheduledWait
trialEarnings = thisTrialData$trialEarnings
timeWaited[trialEarnings > 0] = scheduledWait[trialEarnings > 0]
tMax = max(tMaxs) # the second change
nTimeSteps = tMax / stepDuration
Ts = round(ceiling(timeWaited / stepDuration) + 1)
data_list <- list(wIni = wIni,
nTimeSteps = nTimeSteps,
nPara = nPara,
# real data
N = length(timeWaited),
trialEarnings = trialEarnings,
Ts = Ts,
low = low,
up = up,
#
iti = iti,
stepDuration = stepDuration)
#
load("wtwSettings.RData")
# simulation parameters
nChain = 4
nIter = 100
# determine wIni, the first change
subOptimalRatio = 0.9
if(any(paraNames  == "gamma") || modelName == "BL" ){
wIni = mean(as.double(optimRewardRates)) * stepDuration / (1 - 0.9) * subOptimalRatio
}else{
wIni = mean(as.double(optimRewardRates)) * stepDuration * subOptimalRatio
}
# prepare input
timeWaited = thisTrialData$timeWaited
scheduledWait = thisTrialData$scheduledWait
trialEarnings = thisTrialData$trialEarnings
timeWaited[trialEarnings > 0] = scheduledWait[trialEarnings > 0]
tMax = max(tMaxs) # the second change
nTimeSteps = tMax / stepDuration
Ts = round(ceiling(timeWaited / stepDuration) + 1)
data_list <- list(wIni = wIni,
nTimeSteps = nTimeSteps,
# real data
N = length(timeWaited),
trialEarnings = trialEarnings,
Ts = Ts,
#
iti = iti,
stepDuration = stepDuration)
Ts
fit = sampling(object = model, data = data_list, cores = 1, chains = nChain,
iter = nIter)
# extract parameters
extractedPara = fit %>%
rstan::extract(permuted = F, pars = c(paraNames, "LL_all"))
# save sampling sequences
tempt = extractedPara %>%
adply(2, function(x) x) %>%  # change arrays into 2-d dataframe
dplyr::select(-chains)
tempt
j
=======
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>% ggplot(aes(model, pwaic)) + geom_boxplot() + myTheme
ggsave("figures/expModelComparison/loo_pwaic.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>%
summarise(muData = mean(pwaic), seData = sd(pwaic) / sqrt(length(pwaic)),
minData = muData - seData, maxData = muData + seData)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>% ggplot(aes(model, pwaic)) + geom_boxplot() + myTheme
ggsave("figures/simModelComparison/loo_pwaic.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>%
summarise(muData = mean(pwaic), seData = sd(pwaic) / sqrt(length(pwaic)),
minData = muData - seData, maxData = muData + seData)
# participants best desribed by
library("ggpubr")
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
dir.create("figures/simModelComparison")
ggsave("figures/simModelComparison/loo_nBest.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>% ggplot(aes(model, pwaic)) + geom_boxplot() + myTheme
ggsave("figures/simModelComparison/loo_pwaic.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>%
summarise(muData = mean(pwaic), seData = sd(pwaic) / sqrt(length(pwaic)),
minData = muData - seData, maxData = muData + seData)
>>>>>>> a862a6654821565fdc0943dfc57cf2b0aae54037
