thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
timeWaited = pmin(thisTrialData$timeWaited, max(tMaxs))
Ts = round(ceiling(timeWaited / stepDuration) + 1)
scheduledWait = thisTrialData$scheduledWait
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%d_f[0-9]{1,2}_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
View(cvPara)
partTable
View(logEvidence)
trialPlots(thisTrialData = )
trialPlots(thisTrialData, label = "s")
trialPlots(blockSecs(thisTrialData), label = "s")
trialPlots(block2session(thisTrialData), label = "s")
nModel = length(modelNames)
ids = hdrData$ID
nSub = length(ids)
nFold = 10
logEvidence = matrix(nrow = length(ids), ncol= nModel)
logEvidenceTrain = list(length = nModel)
for(mIdx in 1 : nModel){
modelName = modelNames[mIdx]
paraNames = getParaNames(modelName)
nPara = length(paraNames)
likFun = getLikFun(modelName)
thisLogEvidenceTrain = matrix(nrow = nFold, ncol = nSub)
for(sIdx in 1 : nSub){
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%d.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
timeWaited = pmin(thisTrialData$timeWaited, max(tMaxs))
Ts = round(ceiling(timeWaited / stepDuration) + 1)
scheduledWait = thisTrialData$scheduledWait
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%d_f[0-9]{1,2}_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
if(length(getUseID(cvPara, paraNames)) == 10){
for(f in 1 : nFold){
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial & trials != 1]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
thisLogEvidenceTrain[f, sIdx] = sum(sapply(1 : length(trialsTrain), function(i){
trial = trialsTrain[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
}
logEvidence[sIdx, mIdx] = sum(LL_)
logEvidenceTrain[[mIdx]] = thisLogEvidenceTrain
}
}
}
select = apply(sapply(1 : nModel, function(i) !is.na(logEvidence[,i])), MARGIN = 1, FUN = all)
useID = ids[select]
nUse = length(useID)
output = data.frame(cvLik = logEvidence[select,])
f= "genData/expModelFitting/logEvidenceListCV.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
View(logEvidence)
for(mIdx in 1 : nModel){
modelName = modelNames[mIdx]
paraNames = getParaNames(modelName)
nPara = length(paraNames)
likFun = getLikFun(modelName)
thisLogEvidenceTrain = matrix(nrow = nFold, ncol = nSub)
for(sIdx in 1 : nSub){
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%d.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
timeWaited = pmin(thisTrialData$timeWaited, max(tMaxs))
Ts = round(ceiling(timeWaited / stepDuration) + 1)
scheduledWait = thisTrialData$scheduledWait
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%d_f[0-9]{1,2}_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
if(length(getUseID(cvPara, paraNames)) == 10){
for(f in 1 : nFold){
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial & trials > 10]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
thisLogEvidenceTrain[f, sIdx] = sum(sapply(1 : length(trialsTrain), function(i){
trial = trialsTrain[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
}
logEvidence[sIdx, mIdx] = sum(LL_)
logEvidenceTrain[[mIdx]] = thisLogEvidenceTrain
}
}
}
select = apply(sapply(1 : nModel, function(i) !is.na(logEvidence[,i])), MARGIN = 1, FUN = all)
useID = ids[select]
nUse = length(useID)
output = data.frame(cvLik = logEvidence[select,])
f= "genData/expModelFitting/logEvidenceListCV.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
#
library('ggplot2')
library('plyr')
library('dplyr')
library('tidyr')
load("wtwSettings.RData")
source('subFxs/repetitionFxs.R') # called by simulate
source("subFxs/helpFxs.R") # getParas
source("subFxs/plotThemes.R")
source("subFxs/loadFxs.R") # load scheduledWait from empirical data
source("subFxs/analysisFxs.R")
# modelName
modelName = "RL2"
repFun = getRepFun(modelName)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
# load expPara
paraNames = getParaNames(modelName)
parentDir ="genData/expModelFitting"; dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara = loadExpPara(paraNames, dirName)
set.seed(123)
simTrialData = list()
for(sIdx in 1 : nSub){
id = ids[sIdx]
paras = as.double(expPara[expPara$id == id, 1 : length(paraNames)])
# prepare input
thisTrialData = trialData[[id]] # here we id instead of sIdx
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = unique(thisTrialData$condition)
scheduledWait = thisTrialData$scheduledWait
id = factor(ids[sIdx], levels = hdrData$ID)
simTrialData[[id]] = repFun(paras, cond, scheduledWait)
}
hdrData$ID = factor(hdrData$ID, levels = hdrData$ID)
save(simTrialData, hdrData, file = "genData/simulation/simTrialData.RData")
a = simTrialData[[1]]
a$cond
thisTrialData$condition
#
library('ggplot2')
library('plyr')
library('dplyr')
library('tidyr')
load("wtwSettings.RData")
source('subFxs/repetitionFxs.R') # called by simulate
source("subFxs/helpFxs.R") # getParas
source("subFxs/plotThemes.R")
source("subFxs/loadFxs.R") # load scheduledWait from empirical data
source("subFxs/analysisFxs.R")
# modelName
modelName = "RL2"
repFun = getRepFun(modelName)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
# load expPara
paraNames = getParaNames(modelName)
parentDir ="genData/expModelFitting"; dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara = loadExpPara(paraNames, dirName)
set.seed(123)
simTrialData = list()
for(sIdx in 1 : nSub){
id = ids[sIdx]
paras = as.double(expPara[expPara$id == id, 1 : length(paraNames)])
# prepare input
thisTrialData = trialData[[id]] # here we id instead of sIdx
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = unique(thisTrialData$condition)
scheduledWait = thisTrialData$scheduledWait
id = factor(ids[sIdx], levels = hdrData$ID)
simTrialData[[id]] = repFun(paras, cond, scheduledWait)
}
hdrData$ID = factor(hdrData$ID, levels = hdrData$ID)
save(simTrialData, hdrData, file = "genData/simulation/simTrialData.RData")
#
dir.create("genData")
dir.create("genData/simulation")
library('ggplot2')
library('plyr')
library('dplyr')
library('tidyr')
load("wtwSettings.RData")
source('subFxs/repetitionFxs.R') # called by simulate
source("subFxs/helpFxs.R") # getParas
source("subFxs/plotThemes.R")
source("subFxs/loadFxs.R") # load scheduledWait from empirical data
source("subFxs/analysisFxs.R")
# modelName
modelName = "RL2"
repFun = getRepFun(modelName)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
# load expPara
paraNames = getParaNames(modelName)
parentDir ="genData/expModelFitting"; dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara = loadExpPara(paraNames, dirName)
set.seed(123)
simTrialData = list()
for(sIdx in 1 : nSub){
id = ids[sIdx]
paras = as.double(expPara[expPara$id == id, 1 : length(paraNames)])
# prepare input
thisTrialData = trialData[[id]] # here we id instead of sIdx
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = unique(thisTrialData$condition)
scheduledWait = thisTrialData$scheduledWait
id = factor(ids[sIdx], levels = hdrData$ID)
simTrialData[[id]] = repFun(paras, cond, scheduledWait)
}
hdrData$ID = factor(hdrData$ID, levels = hdrData$ID)
save(simTrialData, hdrData, file = "genData/simulation/simTrialData.RData")
load("/Users/cyx/Documents/first_kick/wtw_timing/genData/simulation/simTrialData.RData")
a = simTrialData[[1]]
a$condtion
#
dir.create("genData")
dir.create("genData/simulation")
library('ggplot2')
library('plyr')
library('dplyr')
library('tidyr')
load("wtwSettings.RData")
source('subFxs/repetitionFxs.R') # called by simulate
source("subFxs/helpFxs.R") # getParas
source("subFxs/plotThemes.R")
source("subFxs/loadFxs.R") # load scheduledWait from empirical data
source("subFxs/analysisFxs.R")
# modelName
modelName = "RL2"
repFun = getRepFun(modelName)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
# load expPara
paraNames = getParaNames(modelName)
parentDir ="genData/expModelFitting"; dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara = loadExpPara(paraNames, dirName)
set.seed(123)
simTrialData = list()
for(sIdx in 1 : nSub){
id = ids[sIdx]
paras = as.double(expPara[expPara$id == id, 1 : length(paraNames)])
# prepare input
thisTrialData = trialData[[id]] # here we id instead of sIdx
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
id = factor(ids[sIdx], levels = hdrData$ID)
simTrialData[[id]] = repFun(paras, cond, scheduledWait)
}
hdrData$ID = factor(hdrData$ID, levels = hdrData$ID)
save(simTrialData, hdrData, file = "genData/simulation/simTrialData.RData")
a = simTrialData[[1]]
a$condtion
#
dir.create("genData")
dir.create("genData/simulation")
library('ggplot2')
library('plyr')
library('dplyr')
library('tidyr')
load("wtwSettings.RData")
source('subFxs/repetitionFxs.R') # called by simulate
source("subFxs/helpFxs.R") # getParas
source("subFxs/plotThemes.R")
source("subFxs/loadFxs.R") # load scheduledWait from empirical data
source("subFxs/analysisFxs.R")
# modelName
modelName = "RL2"
repFun = getRepFun(modelName)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
# load expPara
paraNames = getParaNames(modelName)
parentDir ="genData/expModelFitting"; dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara = loadExpPara(paraNames, dirName)
set.seed(123)
simTrialData = list()
for(sIdx in 1 : nSub){
id = ids[sIdx]
paras = as.double(expPara[expPara$id == id, 1 : length(paraNames)])
# prepare input
thisTrialData = trialData[[id]] # here we id instead of sIdx
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
id = factor(ids[sIdx], levels = hdrData$ID)
simTrialData[[id]] = repFun(paras, cond, scheduledWait)
}
hdrData$ID = factor(hdrData$ID, levels = hdrData$ID)
save(simTrialData, hdrData, file = "genData/simulation/simTrialData.RData")
source('~/Documents/first_kick/wtw_varying_outcome/simuation.R', echo=TRUE)
getwd()
source('~/Documents/first_kick/wtw_timing/simuation.R', echo=TRUE)
modelName = "RL2"
#load libraries
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');
library("stringr")
library("loo")
library("coda")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
source("subFxs/analysisFxs.R")
#  set the environment for Rstan
library('rstan')
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
originalFile = sprintf("genData/expModelFitting/%s", modelName)
dbFile = sprintf("genData/expModelFitting/%sdb", modelName)
if(!file.exists(dbFile)){
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
if(nFile == nSub * 3){
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
}else{
print("Wrong number of files in the original folder!")
break
}
}
# determine paraNames
paraNames = getParaNames(modelName)
nPara = length(paraNames)
if(paraNames == "wrong model name"){
print(paraNames)
break
}
# enter the refit stage
nLoop = 1
i= 1
# determine excID
expPara = loadExpPara(paraNames,
sprintf("genData/expModelFitting/%sdb", modelName))
# determine excID
expPara = loadExpPara(paraNames,
sprintf("genData/expModelFitting/%sdb", modelName))
useID = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
excID = ids[!ids %in% useID]
length(useID)
source('~/Documents/first_kick/wtw_timing/simuation.R', echo=TRUE)
