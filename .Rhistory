for(sIdx in 1 : nSub){
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%s.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
scheduledWait = thisTrialData$scheduledWait
timeWaited = thisTrialData$timeWaited
timeWaited[trialEarnings != 0] = scheduledWait[trialEarnings != 0]
Ts = round(ceiling(timeWaited / stepDuration) + 1)
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%d_f[0-9]{1,2}_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
if(length(getUseID(cvPara, paraNames)) == 10){
for(f in 1 : nFold){
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
if(Ts[trial] > 2){
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = log(1-lik_[Ts[trial] - 1, trial])
junk
}
}
}))
thisLogEvidenceTrain[f, sIdx] = sum(sapply(1 : length(trialsTrain), function(i){
trial = trialsTrain[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
}
logEvidence[sIdx, mIdx] = sum(LL_)
logEvidenceTrain[[mIdx]] = thisLogEvidenceTrain
}
}
}
for(mIdx in 1 : nModel){
modelName = modelNames[mIdx]
paraNames = getParaNames(modelName)
nPara = length(paraNames)
likFun = getLikFun(modelName)
thisLogEvidenceTrain = matrix(nrow = nFold, ncol = nSub)
for(sIdx in 1 : nSub){
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%s.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
scheduledWait = thisTrialData$scheduledWait
timeWaited = thisTrialData$timeWaited
timeWaited[trialEarnings != 0] = scheduledWait[trialEarnings != 0]
Ts = round(ceiling(timeWaited / stepDuration) + 1)
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%d_f[0-9]+_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
if(length(getUseID(cvPara, paraNames)) == 10){
for(f in 1 : nFold){
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
if(Ts[trial] > 2){
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = log(1-lik_[Ts[trial] - 1, trial])
junk
}
}
}))
thisLogEvidenceTrain[f, sIdx] = sum(sapply(1 : length(trialsTrain), function(i){
trial = trialsTrain[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
}
logEvidence[sIdx, mIdx] = sum(LL_)
logEvidenceTrain[[mIdx]] = thisLogEvidenceTrain
}
}
}
for(sIdx in 1 : nSub){
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%s.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
scheduledWait = thisTrialData$scheduledWait
timeWaited = thisTrialData$timeWaited
timeWaited[trialEarnings != 0] = scheduledWait[trialEarnings != 0]
Ts = round(ceiling(timeWaited / stepDuration) + 1)
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%s_f[0-9]+_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
if(length(getUseID(cvPara, paraNames)) == 10){
for(f in 1 : nFold){
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
if(Ts[trial] > 2){
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = log(1-lik_[Ts[trial] - 1, trial])
junk
}
}
}))
thisLogEvidenceTrain[f, sIdx] = sum(sapply(1 : length(trialsTrain), function(i){
trial = trialsTrain[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
}
logEvidence[sIdx, mIdx] = sum(LL_)
logEvidenceTrain[[mIdx]] = thisLogEvidenceTrain
}
}
select = apply(sapply(1 : nModel, function(i) !is.na(logEvidence[,i])), MARGIN = 1, FUN = all)
useID = ids[select]
nUse = length(useID)
output = data.frame(cvLik = logEvidence[select,])
f= "genData/expModelFitting/logEvidenceListCV.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
View(logEvidence)
mkIdx = 2
modelName = modelNames[mIdx]
paraNames = getParaNames(modelName)
nPara = length(paraNames)
likFun = getLikFun(modelName)
for(sIdx in 1 : nSub){
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%s.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
scheduledWait = thisTrialData$scheduledWait
timeWaited = thisTrialData$timeWaited
timeWaited[trialEarnings != 0] = scheduledWait[trialEarnings != 0]
Ts = round(ceiling(timeWaited / stepDuration) + 1)
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%s_f[0-9]+_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
if(length(getUseID(cvPara, paraNames)) == 10){
for(f in 1 : nFold){
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
if(Ts[trial] > 2){
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = log(1-lik_[Ts[trial] - 1, trial])
junk
}
}
}))
}
logEvidence[sIdx, mIdx] = sum(LL_)
}
}
View(logEvidence)
sum(LL_)
mIdx
mkIdx
nModel
mIdx = 2
modelName = modelNames[mIdx]
paraNames = getParaNames(modelName)
nPara = length(paraNames)
likFun = getLikFun(modelName)
for(sIdx in 1 : nSub){
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%s.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
scheduledWait = thisTrialData$scheduledWait
timeWaited = thisTrialData$timeWaited
timeWaited[trialEarnings != 0] = scheduledWait[trialEarnings != 0]
Ts = round(ceiling(timeWaited / stepDuration) + 1)
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%s_f[0-9]+_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
if(length(getUseID(cvPara, paraNames)) == 10){
for(f in 1 : nFold){
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
if(Ts[trial] > 2){
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = log(1-lik_[Ts[trial] - 1, trial])
junk
}
}
}))
}
logEvidence[sIdx, mIdx] = sum(LL_)
}
}
View(logEvidence)
logEvidence = matrix(nrow = length(ids), ncol= nModel)
for(mIdx in 1 : nModel){
modelName = modelNames[mIdx]
paraNames = getParaNames(modelName)
nPara = length(paraNames)
likFun = getLikFun(modelName)
for(sIdx in 1 : nSub){
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%s.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
scheduledWait = thisTrialData$scheduledWait
timeWaited = thisTrialData$timeWaited
timeWaited[trialEarnings != 0] = scheduledWait[trialEarnings != 0]
Ts = round(ceiling(timeWaited / stepDuration) + 1)
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%s_f[0-9]+_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
if(length(getUseID(cvPara, paraNames)) == 10){
for(f in 1 : nFold){
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
if(Ts[trial] > 2){
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = log(1-lik_[Ts[trial] - 1, trial])
junk
}
}
}))
}
logEvidence[sIdx, mIdx] = sum(LL_)
}
}
}
select = apply(sapply(1 : nModel, function(i) !is.na(logEvidence[,i])), MARGIN = 1, FUN = all)
useID = ids[select]
nUse = length(useID)
output = data.frame(cvLik = logEvidence[select,])
f= "genData/expModelFitting/logEvidenceListCV.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
dir.create("figures/expModelComparison")
ggsave("figures/expModelComparison/CV_nBest.png", width = 5, height =3.5)
modelName = "QL1"
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library("stringr")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
#  set the environment for Rstan
library('rstan')
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# parameters
nFold = 10
# load expData
# one sub's data, two conditions together, are in one element in trialData
# hdrData only has 42 entries
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
nSub = nrow(hdrData)
ids = hdrData$ID# id encoded in trialData
# detect the debug folder
originalFile = sprintf("genData/expModelFittingCV/%s", modelName)
dbFile = sprintf("genData/expModelFittingCV/%sdb", modelName)
if(!file.exists(dbFile)){
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
if(nFile == (nFold * nSub)){
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
}else{
print("Wrong number of files in the original folder!")
break
}
}
# loop over models
paraNames = getParaNames(modelName)
nPara = length(paraNames)
# load cvPara
# enter the refit stage
nLoop = 1
cvPara = loadCVPara(paraNames, sprintf("genData/expModelFittingCV/%sdb", modelName),
"*_summary.txt")
idsCV =  cvPara$id # levels accoring to s%-f*
useID = getUseID(cvPara, paraNames) # use subset so should perserve the levels
excID = idsCV[!idsCV %in% useID]
text = sprintf("Start to refit %d participants", length(excID))
print(text)
hdrData$ID
id = hdrData$ID[1]
junk = str_locate(id, "s[0-9]+")
sIdx = substr(id, (junk[1] + 1), junk[2]) # use to load fit.RData and trialData
junk = str_locate(id, "f[0-9]+")
fIdx =  as.double(substr(id, (junk[1] + 1), junk[2]))
text = sprintf("reFit %s", id)
print(text)
# update nFits and converge
fitFile = sprintf("genData/expModelFittingCV/%sdb/afit_%s.RData", modelName, id)
if(file.exists(fitFile)){
load(fitFile)
nFit = nFit  + 1
save(nFit, file = fitFile)
}else{
nFit = 2
save(nFit, file = fitFile)
}
nFit = nFit - 1
v
save(nFit, file = fitFile)
sIdx
sIdx = substr(id, (junk[1] + 1), junk[2]) # use to load fit.RData and trialData
sIdx
id
useID
id = useID[1]
junk = str_locate(id, "s[0-9]+")
sIdx = substr(id, (junk[1] + 1), junk[2]) # use to load fit.RData and trialData
junk = str_locate(id, "f[0-9]+")
fIdx =  as.double(substr(id, (junk[1] + 1), junk[2]))
text = sprintf("reFit %s", id)
sIdx
View(trialData)
trialData[["461"]]
hdrData$ID
