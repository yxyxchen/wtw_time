source("subFxs/loadFxs.R") # load scheduledWait from empirical data
source("subFxs/analysisFxs.R")
# modelName
modelName = "RL2"
repFun = getRepFun(modelName)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
# load expPara
paraNames = getParaNames(modelName)
parentDir ="genData/expModelFitting"; dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara = loadExpPara(paraNames, dirName)
set.seed(123)
simTrialData = list()
for(sIdx in 1 : nSub){
id = ids[sIdx]
paras = as.double(expPara[expPara$id == id, 1 : length(paraNames)])
# prepare input
thisTrialData = trialData[[id]] # here we id instead of sIdx
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
id = factor(ids[sIdx], levels = hdrData$ID)
simTrialData[[id]] = repFun(paras, cond, scheduledWait)
}
hdrData$ID = factor(hdrData$ID, levels = hdrData$ID)
save(simTrialData, hdrData, file = "genData/simulation/simTrialData.RData")
a = simTrialData[[1]]
a$condtion
#
dir.create("genData")
dir.create("genData/simulation")
library('ggplot2')
library('plyr')
library('dplyr')
library('tidyr')
load("wtwSettings.RData")
source('subFxs/repetitionFxs.R') # called by simulate
source("subFxs/helpFxs.R") # getParas
source("subFxs/plotThemes.R")
source("subFxs/loadFxs.R") # load scheduledWait from empirical data
source("subFxs/analysisFxs.R")
# modelName
modelName = "RL2"
repFun = getRepFun(modelName)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
# load expPara
paraNames = getParaNames(modelName)
parentDir ="genData/expModelFitting"; dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara = loadExpPara(paraNames, dirName)
set.seed(123)
simTrialData = list()
for(sIdx in 1 : nSub){
id = ids[sIdx]
paras = as.double(expPara[expPara$id == id, 1 : length(paraNames)])
# prepare input
thisTrialData = trialData[[id]] # here we id instead of sIdx
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
id = factor(ids[sIdx], levels = hdrData$ID)
simTrialData[[id]] = repFun(paras, cond, scheduledWait)
}
hdrData$ID = factor(hdrData$ID, levels = hdrData$ID)
save(simTrialData, hdrData, file = "genData/simulation/simTrialData.RData")
source('~/Documents/first_kick/wtw_varying_outcome/simuation.R', echo=TRUE)
getwd()
source('~/Documents/first_kick/wtw_timing/simuation.R', echo=TRUE)
modelName = "RL2"
#load libraries
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');
library("stringr")
library("loo")
library("coda")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
source("subFxs/analysisFxs.R")
#  set the environment for Rstan
library('rstan')
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
originalFile = sprintf("genData/expModelFitting/%s", modelName)
dbFile = sprintf("genData/expModelFitting/%sdb", modelName)
if(!file.exists(dbFile)){
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
if(nFile == nSub * 3){
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
}else{
print("Wrong number of files in the original folder!")
break
}
}
# determine paraNames
paraNames = getParaNames(modelName)
nPara = length(paraNames)
if(paraNames == "wrong model name"){
print(paraNames)
break
}
# enter the refit stage
nLoop = 1
i= 1
# determine excID
expPara = loadExpPara(paraNames,
sprintf("genData/expModelFitting/%sdb", modelName))
# determine excID
expPara = loadExpPara(paraNames,
sprintf("genData/expModelFitting/%sdb", modelName))
useID = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
excID = ids[!ids %in% useID]
length(useID)
source('~/Documents/first_kick/wtw_timing/simuation.R', echo=TRUE)
load("/Users/cyx/Documents/first_kick/wtw_timing/genData/simulation/simTrialData.RData")
View(simTrialData)
# libraries and scripts
library("stringr")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
source("subFxs/modelComparisonFxs.R")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
# load model names
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
load("genData/expDataAnalysis/blockData.RData")
# select common useID
idList = hdrData$ID
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
useID_ = vector(mode = "list", length = nModel)
source("subFxs/loadFxs.R")
xtract logEvidence, cross validation
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
ids = hdrData$ID
nSub = length(ids)
nFold = 10
logEvidence = matrix(nrow = length(ids), ncol= nModel)
logEvidenceTrain = list(length = nModel)
for(mIdx in 1 : nModel){
modelName = modelNames[mIdx]
paraNames = getParaNames(modelName)
nPara = length(paraNames)
likFun = getLikFun(modelName)
thisLogEvidenceTrain = matrix(nrow = nFold, ncol = nSub)
for(sIdx in 1 : nSub){
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%d.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
timeWaited = pmin(thisTrialData$timeWaited, max(tMaxs))
Ts = round(ceiling(timeWaited / stepDuration) + 1)
scheduledWait = thisTrialData$scheduledWait
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%d_f[0-9]{1,2}_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
if(length(getUseID(cvPara, paraNames)) == 10){
for(f in 1 : nFold){
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
thisLogEvidenceTrain[f, sIdx] = sum(sapply(1 : length(trialsTrain), function(i){
trial = trialsTrain[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}
}))
}
logEvidence[sIdx, mIdx] = sum(LL_)
logEvidenceTrain[[mIdx]] = thisLogEvidenceTrain
}
}
}
select = apply(sapply(1 : nModel, function(i) !is.na(logEvidence[,i])), MARGIN = 1, FUN = all)
useID = ids[select]
nUse = length(useID)
output = data.frame(cvLik = logEvidence[select,])
f= "genData/expModelFitting/logEvidenceListCV.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
dir.create("figures/expModelComparison")
ggsave("figures/expModelComparison/CV_nBest.png", width = 5, height =3.5)
i = 1
sIdx = 1
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%d.RData", id))
thisTrialData = trialData[[id]]
mkIdx = 1
modelName = modelNames[mIdx]
paraNames = getParaNames(modelName)
nPara = length(paraNames)
likFun = getLikFun(modelName)
thisLogEvidenceTrain = matrix(nrow = nFold, ncol = nSub)
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%d.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
timeWaited = pmin(thisTrialData$timeWaited, max(tMaxs))
Ts = round(ceiling(timeWaited / stepDuration) + 1)
scheduledWait = thisTrialData$scheduledWait
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%d_f[0-9]{1,2}_summary.txt", id))
View(cvPara)
mIdx = 1
modelName = modelNames[mIdx]
modelName
paraNames = getParaNames(modelName)
nPara = length(paraNames)
paraNames
likFun = getLikFun(modelName)
likFun = getLikFun(modelName)
thisLogEvidenceTrain = matrix(nrow = nFold, ncol = nSub)
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%d.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
timeWaited = pmin(thisTrialData$timeWaited, max(tMaxs))
Ts = round(ceiling(timeWaited / stepDuration) + 1)
scheduledWait = thisTrialData$scheduledWait
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%d_f[0-9]{1,2}_summary.txt", id))
View(cvPara)
partTable
source('~/Documents/first_kick/wtw_varying_outcome/subFxs/repetitionFxs.R', echo=TRUE)
source('~/Documents/first_kick/wtw_varying_outcome/subFxs/analysisFxs.R', echo=TRUE)
trialPlots(thisTrialData)
trialPlots(block2session(thisTrialData))
trialPlots(block2session(thisTrialData[thisTrialData$trialNum %in% partTable[-1,]]))
thisTrialData$trialNum
trialPlots(block2session(thisTrialData[1 : (thisTrialData$trialNum) %in% partTable[-1,],]))
trialPlots(block2session(thisTrialData[1 : (thisTrialData$trialNum) %in% partTable[-6,],]))
trialPlots(block2session(thisTrialData[1 : (thisTrialData$trialNum) %in% partTable[-6,],]))
a =
thisTrialData[1 : (thisTrialData$trialNum) %in% partTable[-6,],])
thisTrialData[1 : (thisTrialData$trialNum) %in% partTable[-6,],]
trialPlots(block2session(
thisTrialData[(1 : nrow(thisTrialData$trialNum)) %in% partTable[-6,],]))
trialPlots(block2session(
thisTrialData[(1 : nrow(thisTrialData$trialNum)) %in% partTable[-6,],]))
(1 : nrow(thisTrialData$trialNum))
trialPlots(block2session(
thisTrialData[(1 : nrow(thisTrialData$blockNum)) %in% partTable[-6,],]))
a =  thisTrialData[(1 : nrow(thisTrialData$blockNum)) %in% partTable[-6,],]
nrow(thisTrialData$blockNum
)
trialPlots(block2session(
thisTrialData[(1 : length(thisTrialData$blockNum)) %in% partTable[-6,],]))
trialPlots(block2session(
thisTrialData[(1 : length(thisTrialData$blockNum)) %in% partTable[-7,],]))
thisLogEvidenceTrain[6,1]
a = logEvidenceTrain[[1]]
dim(a)
a[,1]
View(cvPara)
modelName = "QL1"
# model fitting parameters
nFold = 10
# create outfiles
dir.create("genData")
dir.create("genData/expModelFittingCV")
dir.create(sprintf("genData/expModelFittingCV/%s", modelName))
#load libraries
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan')
library("loo")
library("coda")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
source("subFxs/analysisFxs.R")
#  set the environment for Rstan
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
idList = hdrData$ID
n = length(idList)
# determine paraNames
paraNames = getParaNames(modelName)
if(paraNames == "wrong model name"){
print(paraNames)
break
}
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
set.seed(123)
i = 1
thisID = idList[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# determine partitions
load(sprintf("genData/expModelFittingCV/split/s%d.RData", thisID))
# loop
for(j in 1 : nFold){
select = as.vector(partTable[-j,])
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%s/s%d_f%d", modelName, thisID, j)
modelFittingCV(thisTrialData, fileName, paraNames, model, modelName)
}
j = 1
select = as.vector(partTable[-j,])
j = 7
select = as.vector(partTable[-j,])
select
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
plot(block2session(thisTrialData))
trialPlots(block2session(thisTrialData))
graphics.off()
trialPlots(block2session(thisTrialData))
fileName = sprintf("genData/expModelFittingCV/%s/s%d_f%d", modelName, thisID, j)
# compile the stan model
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
#
load("wtwSettings.RData")
# simulation parameters
nChain = 4
nIter = 100
# determine wIni, the first change
subOptimalRatio = 0.9
if(any(paraNames  == "gamma") || modelName == "BL" ){
wIni = mean(as.double(optimRewardRates)) * stepDuration / (1 - 0.9) * subOptimalRatio
}else{
wIni = mean(as.double(optimRewardRates)) * stepDuration * subOptimalRatio
}
# prepare input
timeWaited = thisTrialData$timeWaited
wIni
# prepare input
timeWaited = thisTrialData$timeWaited
scheduledWait = thisTrialData$scheduledWait
trialEarnings = thisTrialData$trialEarnings
timeWaited[trialEarnings > 0] = scheduledWait[trialEarnings > 0]
tMax = max(tMaxs) # the second change
nTimeSteps = tMax / stepDuration
Ts = round(ceiling(timeWaited / stepDuration) + 1)
data_list <- list(wIni = wIni,
nTimeSteps = nTimeSteps,
nPara = nPara,
# real data
N = length(timeWaited),
trialEarnings = trialEarnings,
Ts = Ts,
low = low,
up = up,
#
iti = iti,
stepDuration = stepDuration)
#
load("wtwSettings.RData")
# simulation parameters
nChain = 4
nIter = 100
# determine wIni, the first change
subOptimalRatio = 0.9
if(any(paraNames  == "gamma") || modelName == "BL" ){
wIni = mean(as.double(optimRewardRates)) * stepDuration / (1 - 0.9) * subOptimalRatio
}else{
wIni = mean(as.double(optimRewardRates)) * stepDuration * subOptimalRatio
}
# prepare input
timeWaited = thisTrialData$timeWaited
scheduledWait = thisTrialData$scheduledWait
trialEarnings = thisTrialData$trialEarnings
timeWaited[trialEarnings > 0] = scheduledWait[trialEarnings > 0]
tMax = max(tMaxs) # the second change
nTimeSteps = tMax / stepDuration
Ts = round(ceiling(timeWaited / stepDuration) + 1)
data_list <- list(wIni = wIni,
nTimeSteps = nTimeSteps,
# real data
N = length(timeWaited),
trialEarnings = trialEarnings,
Ts = Ts,
#
iti = iti,
stepDuration = stepDuration)
Ts
fit = sampling(object = model, data = data_list, cores = 1, chains = nChain,
iter = nIter)
# extract parameters
extractedPara = fit %>%
rstan::extract(permuted = F, pars = c(paraNames, "LL_all"))
# save sampling sequences
tempt = extractedPara %>%
adply(2, function(x) x) %>%  # change arrays into 2-d dataframe
dplyr::select(-chains)
tempt
j
