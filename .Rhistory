<<<<<<< HEAD
nLoop = 1
cvPara = loadCVPara(paraNames, sprintf("genData/expModelFittingCV/%sdb", modelName),
"*_summary.txt")
idsCV =  cvPara$id
useID = getUseID(cvPara, paraNames)
excID = idsCV[!idsCV %in% useID]
excID
text = sprintf("Start to refit %d participants", length(excID))
print(text)
i = 1
id = excID[i]
str_locate(id, "s[0-9]+")
junk = str_locate(id, "s[0-9]+")
sIdx = substr(id, (junk[1] + 1), junk[2]]
fIdx = excID[i] - (sIdx-1) * nFold
text = sprintf("reFit %s", ids[sIdx])
print(text)
# update nFits and converge
fitFile = sprintf("genData/expModelFittingCV/%sdb/afit_s%d_f%d.RData", modelName, ids[sIdx], fIdx)
if(file.exists(fitFile)){
load(fitFile)
nFit = nFit  + 1
save(nFit, file = fitFile)
}else{
nFit = 2
save(nFit, file = fitFile)
}
# prepare data
thisTrialData = trialData[[ids[sIdx]]]
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# select the training set
load(sprintf("genData/expModelFittingCV/split/s%d.RData", ids[sIdx]))
select = as.vector(partTable[-fIdx,])
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%sdb/s%d_f%d", modelName,
ids[sIdx], fIdx)
# refit
# load upper and lower
tempt = read.csv(sprintf("genData/expModelFittingCV/%sdb/s%d_f%d_summary.txt", modelName,
ids[sIdx], fIdx),header = F)
low= tempt[1:nPara,4]
up = tempt[1 : nPara,8]
converge = modelFittingCVdb(thisTrialData, fileName, paraNames, model, modelName, nPara, low, up)
}# loop over participants
nLoop = nLoop + 1
}else{
break
}
}
# evaluate useID again
cvPara = loadCVPara(paraNames, sprintf("genData/expModelFittingCV/%sdb", modelName),"*_summary.txt")
useID = getUseID(cvPara, paraNames)
print(length(useID))
}# end of the function
substr(id, (junk[1] + 1), junk[2]])
sIdx = substr( (junk[1] + 1), junk[2], id)
sidx
sIdx
junk
sIdx = substr(id, (junk[1] + 1), junk[2])
sIdx
junk = str_locate(id, "f[0-9]+")
fIdx =  substr(id, (junk[1] + 1), junk[2])
fIdx
text = sprintf("reFit %s", id)
print(text)
s
sIdx
trialData[[sIdx]]
a = trialData[[sIdx]]
ids[ids == sIdx]
b = trialData[ids[ids == sIdx]]
b = trialData[[ids[ids == sIdx]]]
a$trialEarnings
b$timeWaited
a$timeWaited
sprintf("genData/expModelFittingCV/split/s%s.RData", id)
sIdx
# extract sIdx and fIdx from the id encoded in cvPara
id = excID[i]
junk = str_locate(id, "s[0-9]+")
sIdx = substr(id, (junk[1] + 1), junk[2])
junk = str_locate(id, "f[0-9]+")
fIdx =  as.double(substr(id, (junk[1] + 1), junk[2]))
text = sprintf("reFit %s", id)
print(text)
# update nFits and converge
fitFile = sprintf("genData/expModelFittingCV/%sdb/afit_s%d_f%d.RData", modelName, ids[sIdx], fIdx)
fitFile
# update nFits and converge
fitFile = sprintf("genData/expModelFittingCV/%sdb/afit_%s.RData", modelName, id)
fitFile
if(file.exists(fitFile)){
load(fitFile)
nFit = nFit  + 1
save(nFit, file = fitFile)
}else{
nFit = 2
save(nFit, file = fitFile)
}
# prepare data
thisTrialData = trialData[[sIdx]]
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# select the training set
load(sprintf("genData/expModelFittingCV/split/s%s.RData", sIdx))
select = as.vector(partTable[-fIdx,])
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%sdb/%s", modelName,
id)
sprintf("genData/expModelFittingCV/%sdb/%s", modelName,
id)
# refit
# load upper and lower
tempt = read.csv(sprintf("genData/expModelFittingCV/%sdb/%s_summary.txt", modelName,
id),header = F)
sprintf("genData/expModelFittingCV/%sdb/%s_summary.txt", modelName,
id)
rm(list = ls())
modelName = "RL"
modelName = "RL1"
#load libraries
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');
library("stringr")
library("loo")
library("coda")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
source("subFxs/analysisFxs.R")
#  set the environment for Rstan
library('rstan')
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
originalFile = sprintf("genData/expModelFitting/%s", modelName)
dbFile = sprintf("genData/expModelFitting/%sdb", modelName)
if(!file.exists(dbFile)){
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
if(nFile == nSub * 3){
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
}else{
print("Wrong number of files in the original folder!")
break
}
}
# determine paraNames
paraNames = getParaNames(modelName)
nPara = length(paraNames)
if(paraNames == "wrong model name"){
print(paraNames)
break
}
# enter the refit stage
nLoop = 1
while(nLoop < 15){
# determine excID
expPara = loadExpPara(paraNames,
sprintf("genData/expModelFitting/%sdb", modelName))
useID = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
excID = ids[!ids %in% useID]
# loop over excID
n = length(excID)
if(n > 0){
text = sprintf("Start to refit %d participants", length(excID))
print(text)
foreach(i = 1 : n) %dopar% {
thisID = excID[[i]]
text = sprintf("refit s%d", thisID)
print(text)
# update nFits and converge
fitFile = sprintf("genData/expModelFitting/%sdb/afit_s%d.RData", modelName, thisID)
if(file.exists(fitFile)){
load(fitFile); nFit = nFit  + 1; save(nFit, file = fitFile)
}else{
nFit = 2; save(nFit, file = fitFile)
}
# prepare
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# determine fileName
fileName = sprintf("genData/expModelFitting/%sdb/s%s", modelName, thisID)
# refit
# load upper and lower
tempt = read.csv(sprintf("genData/expModelFitting/%sdb/s%s_summary.txt", modelName, thisID),
header = F)
low= tempt[1:nPara,4]
up = tempt[1 : nPara,8]
converge = modelFittingdb(thisTrialData, fileName, paraNames, model, modelName, nPara, low, up)
}# loop over participants
nLoop = nLoop + 1
}else{
break
}
}
# determine excID
expPara = loadExpPara(paraNames,
sprintf("genData/expModelFitting/%sdb", modelName))
useID = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
excID = ids[!ids %in% useID]
expPara$id
useID
modelName = "RL1"
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library("stringr")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
#  set the environment for Rstan
library('rstan')
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# parameters
nFold = 10
# load expData
# one sub's data, two conditions together, are in one element in trialData
# hdrData only has 42 entries
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
nSub = nrow(hdrData)
ids = hdrData$ID# id encoded in trialData
# initialize outputs
# for a specific model
# detect the debug folder
originalFile = sprintf("genData/expModelFittingCV/%s", modelName)
dbFile = sprintf("genData/expModelFittingCV/%sdb", modelName)
if(!file.exists(dbFile)){
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
if(nFile == (nFold * nSub))){
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
}else{
print("Wrong number of files in the original folder!")
break
}
}
# loop over models
paraNames = getParaNames(modelName)
nPara = length(paraNames)
# load cvPara
# enter the refit stage
nLoop = 1
cvPara = loadCVPara(paraNames, sprintf("genData/expModelFittingCV/%sdb", modelName),
"*_summary.txt")
idsCV =  cvPara$id # levels accoring to s%-f*
useID = getUseID(cvPara, paraNames) # use subset so should perserve the levels
excID = idsCV[!idsCV %in% useID]
cvPara = loadCVPara(paraNames, sprintf("genData/expModelFittingCV/%sdb", modelName),
"*_summary.txt")
cvPara = loadCVPara(paraNames, sprintf("genData/expModelFittingCV/%sdb", modelName),
"*_summary.txt")
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library("stringr")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
#  set the environment for Rstan
library('rstan')
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# parameters
nFold = 10
# load expData
# one sub's data, two conditions together, are in one element in trialData
# hdrData only has 42 entries
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
nSub = nrow(hdrData)
ids = hdrData$ID# id encoded in trialData
# detect the debug folder
originalFile = sprintf("genData/expModelFittingCV/%s", modelName)
dbFile = sprintf("genData/expModelFittingCV/%sdb", modelName)
if(!file.exists(dbFile)){
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
if(nFile == (nFold * nSub))){
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
}else{
print("Wrong number of files in the original folder!")
break
}
}
# detect the debug folder
originalFile = sprintf("genData/expModelFittingCV/%s", modelName)
dbFile = sprintf("genData/expModelFittingCV/%sdb", modelName)
file.exists(dbFile)
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
nFile == (nFold * nSub)
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
# detect the debug folder
originalFile = sprintf("genData/expModelFittingCV/%s", modelName)
dbFile = sprintf("genData/expModelFittingCV/%sdb", modelName)
if(!file.exists(dbFile)){
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
if(nFile == (nFold * nSub))){
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
}else{
print("Wrong number of files in the original folder!")
break
}
}
dbFile = sprintf("genData/expModelFittingCV/%sdb", modelName)
if(!file.exists(dbFile)){
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
if(nFile == (nFold * nSub)){
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
}else{
print("Wrong number of files in the original folder!")
break
}
}
# loop over models
paraNames = getParaNames(modelName)
nPara = length(paraNames)
# load cvPara
# enter the refit stage
nLoop = 1
cvPara = loadCVPara(paraNames, sprintf("genData/expModelFittingCV/%sdb", modelName),
"*_summary.txt")
idsCV =  cvPara$id # levels accoring to s%-f*
useID = getUseID(cvPara, paraNames) # use subset so should perserve the levels
text = sprintf("Start to refit %d participants", length(excID))
excID = idsCV[!idsCV %in% useID]
text = sprintf("Start to refit %d participants", length(excID))
print(text)
# compile the debug version of the model
model = stan_model(file = sprintf("stanModels/%sdb.stan", modelName))
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library("stringr")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
#  set the environment for Rstan
library('rstan')
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# parameters
nFold = 10
# load expData
# one sub's data, two conditions together, are in one element in trialData
# hdrData only has 42 entries
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
nSub = nrow(hdrData)
ids = hdrData$ID# id encoded in trialData
# detect the debug folder
originalFile = sprintf("genData/expModelFittingCV/%s", modelName)
dbFile = sprintf("genData/expModelFittingCV/%sdb", modelName)
if(!file.exists(dbFile)){
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
if(nFile == (nSub * nFold)){
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
}else{
print("Wrong number of files in the original folder!")
break
}
}
# loop over models
paraNames = getParaNames(modelName)
nPara = length(paraNames)
# load cvPara
# enter the refit stage
nLoop = 1
cvPara = loadCVPara(paraNames, sprintf("genData/expModelFittingCV/%sdb", modelName),
"*_summary.txt")
idsCV = cvPara$id
useID = getUseID(cvPara, paraNames)
excID = idsCV[!idsCV %in% useID]
text = sprintf("%s, Start to refit %d participants", modelName, length(excID))
print(text)
i = 1
# update nFits and converge
fitFile = sprintf("genData/expModelFittingCV/%sdb/afit_%s.RData", modelName, id)
if(file.exists(fitFile)){
load(fitFile)
nFit = nFit  + 1
save(nFit, file = fitFile)
}else{
nFit = 2
save(nFit, file = fitFile)
}
# extract sIdx and fIdx from the id encoded in cvPara
id = excID[i]
junk = str_locate(id, "s[0-9]+")
sIdx = substr(id, (junk[1] + 1), junk[2]) # use to load fit.RData and trialData
junk = str_locate(id, "f[0-9]+")
fIdx =  as.double(substr(id, (junk[1] + 1), junk[2]))
text = sprintf("reFit %s", id)
print(text)
# update nFits and converge
fitFile = sprintf("genData/expModelFittingCV/%sdb/afit_%s.RData", modelName, id)
if(file.exists(fitFile)){
load(fitFile)
nFit = nFit  + 1
save(nFit, file = fitFile)
}else{
nFit = 2
save(nFit, file = fitFile)
}
# prepare data
thisTrialData = trialData[[sIdx]]
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[(!(1 : nrow(thisTrialData)) %in% excluedTrials) & thisTrialData$blockNum <= 2,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# select the training set
load(sprintf("genData/expModelFittingCV/split/s%s.RData", sIdx))
select = c(1:5, as.vector(partTable[-fIdx,]))
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%sdb/%s", modelName,
id)
# refit
# load upper and lower
tempt = read.csv(sprintf("genData/expModelFittingCV/%sdb/%s_summary.txt", modelName,
id),header = F)
low= tempt[1:nPara,4]
cvPara
=======
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%s/s%d_f%d", modelName, thisID, j)
modelFittingCV(thisTrialData, fileName, paraNames, model, modelName)
}
j = 1
select = as.vector(partTable[-j,])
j = 7
select = as.vector(partTable[-j,])
select
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
plot(block2session(thisTrialData))
trialPlots(block2session(thisTrialData))
graphics.off()
trialPlots(block2session(thisTrialData))
fileName = sprintf("genData/expModelFittingCV/%s/s%d_f%d", modelName, thisID, j)
# compile the stan model
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
#
load("wtwSettings.RData")
# simulation parameters
nChain = 4
nIter = 100
# determine wIni, the first change
subOptimalRatio = 0.9
if(any(paraNames  == "gamma") || modelName == "BL" ){
wIni = mean(as.double(optimRewardRates)) * stepDuration / (1 - 0.9) * subOptimalRatio
}else{
wIni = mean(as.double(optimRewardRates)) * stepDuration * subOptimalRatio
}
# prepare input
timeWaited = thisTrialData$timeWaited
wIni
# prepare input
timeWaited = thisTrialData$timeWaited
scheduledWait = thisTrialData$scheduledWait
trialEarnings = thisTrialData$trialEarnings
timeWaited[trialEarnings > 0] = scheduledWait[trialEarnings > 0]
tMax = max(tMaxs) # the second change
nTimeSteps = tMax / stepDuration
Ts = round(ceiling(timeWaited / stepDuration) + 1)
data_list <- list(wIni = wIni,
nTimeSteps = nTimeSteps,
nPara = nPara,
# real data
N = length(timeWaited),
trialEarnings = trialEarnings,
Ts = Ts,
low = low,
up = up,
#
iti = iti,
stepDuration = stepDuration)
#
load("wtwSettings.RData")
# simulation parameters
nChain = 4
nIter = 100
# determine wIni, the first change
subOptimalRatio = 0.9
if(any(paraNames  == "gamma") || modelName == "BL" ){
wIni = mean(as.double(optimRewardRates)) * stepDuration / (1 - 0.9) * subOptimalRatio
}else{
wIni = mean(as.double(optimRewardRates)) * stepDuration * subOptimalRatio
}
# prepare input
timeWaited = thisTrialData$timeWaited
scheduledWait = thisTrialData$scheduledWait
trialEarnings = thisTrialData$trialEarnings
timeWaited[trialEarnings > 0] = scheduledWait[trialEarnings > 0]
tMax = max(tMaxs) # the second change
nTimeSteps = tMax / stepDuration
Ts = round(ceiling(timeWaited / stepDuration) + 1)
data_list <- list(wIni = wIni,
nTimeSteps = nTimeSteps,
# real data
N = length(timeWaited),
trialEarnings = trialEarnings,
Ts = Ts,
#
iti = iti,
stepDuration = stepDuration)
Ts
fit = sampling(object = model, data = data_list, cores = 1, chains = nChain,
iter = nIter)
# extract parameters
extractedPara = fit %>%
rstan::extract(permuted = F, pars = c(paraNames, "LL_all"))
# save sampling sequences
tempt = extractedPara %>%
adply(2, function(x) x) %>%  # change arrays into 2-d dataframe
dplyr::select(-chains)
tempt
j
=======
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>% ggplot(aes(model, pwaic)) + geom_boxplot() + myTheme
ggsave("figures/expModelComparison/loo_pwaic.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>%
summarise(muData = mean(pwaic), seData = sd(pwaic) / sqrt(length(pwaic)),
minData = muData - seData, maxData = muData + seData)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>% ggplot(aes(model, pwaic)) + geom_boxplot() + myTheme
ggsave("figures/simModelComparison/loo_pwaic.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>%
summarise(muData = mean(pwaic), seData = sd(pwaic) / sqrt(length(pwaic)),
minData = muData - seData, maxData = muData + seData)
# participants best desribed by
library("ggpubr")
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
dir.create("figures/simModelComparison")
ggsave("figures/simModelComparison/loo_nBest.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>% ggplot(aes(model, pwaic)) + geom_boxplot() + myTheme
ggsave("figures/simModelComparison/loo_pwaic.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>%
summarise(muData = mean(pwaic), seData = sd(pwaic) / sqrt(length(pwaic)),
minData = muData - seData, maxData = muData + seData)
>>>>>>> a862a6654821565fdc0943dfc57cf2b0aae54037
modelName = "QL1"
# model fitting parameters
nFold = 10
# create outfiles
dir.create("genData")
dir.create("genData/expModelFittingCV")
dir.create(sprintf("genData/expModelFittingCV/%s", modelName))
#load libraries
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan')
library("loo")
library("coda")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
source("subFxs/analysisFxs.R")
#  set the environment for Rstan
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# compile the stan model
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
n = length(ids)
# determine paraNames
paraNames = getParaNames(modelName)
if(paraNames == "wrong model name"){
print(paraNames)
break
}
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
set.seed(123)
foreach(i = 1 : 2) %dopar% {
thisID = ids[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# determine partitions
load(sprintf("genData/expModelFittingCV/split/s%d.RData", thisID))
# loop
for(j in 1 : nFold){
select = as.vector(partTable[-j,])
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%s/s%d_f%d", modelName, thisID, j)
modelFittingCV(thisTrialData, fileName, paraNames, model, modelName)
}
}
foreach(i = 1 : 2) %:% {
foreach (j = 1 : nFold) %dopar% {
thisID = ids[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# determine partitions
load(sprintf("genData/expModelFittingCV/split/s%d.RData", thisID))
select = as.vector(partTable[-j,])
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%s/s%d_f%d", modelName, thisID, j)
modelFittingCV(thisTrialData, fileName, paraNames, model, modelName)
}
}
foreach(i = 1 : 2) %:%
foreach (j = 1 : nFold) %dopar% {
thisID = ids[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# determine partitions
load(sprintf("genData/expModelFittingCV/split/s%d.RData", thisID))
select = as.vector(partTable[-j,])
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%s/s%d_f%d", modelName, thisID, j)
modelFittingCV(thisTrialData, fileName, paraNames, model, modelName)
}
nFold = 10
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
dir.create("genData/expModelFittingCV")
dir.create("genData/expModelFittingCV/split")
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
n = length(ids)
set.seed(123)
for(i in 1 : n){
thisID = ids[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials &
thisTrialData$blockNum <= 2,]
# determine partitions
nPart = ceiling(nrow(thisTrialData) / nFold)
partTable = sapply(1 : nPart, function(i) sample(1:nFold,replace = FALSE) + (i -1) * nFold)
fileName = sprintf("genData/expModelFittingCV/split/s%s.RData",  thisID)
save("partTable", file = fileName)
}
nFold = 10
# create outfiles
dir.create("genData")
dir.create("genData/expModelFittingCV")
dir.create(sprintf("genData/expModelFittingCV/%s", modelName))
#load libraries
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan')
library("loo")
library("coda")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
source("subFxs/analysisFxs.R")
#  set the environment for Rstan
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# compile the stan model
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
n = length(ids)
# determine paraNames
paraNames = getParaNames(modelName)
if(paraNames == "wrong model name"){
print(paraNames)
break
}
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
set.seed(123)
foreach(i = 1 : 2) %:%
foreach (j = 1 : nFold) %dopar% {
thisID = ids[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# determine partitions
load(sprintf("genData/expModelFittingCV/split/s%d.RData", thisID))
select = as.vector(partTable[-j,])
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%s/s%s_f%d", modelName, thisID, j)
modelFittingCV(thisTrialData, fileName, paraNames, model, modelName)
}
# model fitting parameters
nFold = 10
# create outfiles
dir.create("genData")
dir.create("genData/expModelFittingCV")
dir.create(sprintf("genData/expModelFittingCV/%s", modelName))
#load libraries
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan')
library("loo")
library("coda")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
source("subFxs/analysisFxs.R")
#  set the environment for Rstan
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# compile the stan model
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
n = length(ids)
# determine paraNames
paraNames = getParaNames(modelName)
if(paraNames == "wrong model name"){
print(paraNames)
break
}
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
set.seed(123)
foreach(i = 1 : 2) %:%
foreach (j = 1 : nFold) %dopar% {
thisID = ids[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# determine partitions
load(sprintf("genData/expModelFittingCV/split/s%s.RData", thisID))
select = as.vector(partTable[-j,])
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%s/s%s_f%d", modelName, thisID, j)
modelFittingCV(thisTrialData, fileName, paraNames, model, modelName)
}
nFold = 10
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
dir.create("genData/expModelFittingCV")
dir.create("genData/expModelFittingCV/split")
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
n = length(ids)
set.seed(123)
for(i in 1 : n){
thisID = ids[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials &
thisTrialData$blockNum <= 2,]
# determine partitions
nSkip = 5
nPart = ceiling((nrow(thisTrialData) - nSkip)/ nFold)
partTable = sapply(1 : nPart, function(i) sample(1:nFold,replace = FALSE) + (i -1) * nFold + nSkip)
fileName = sprintf("genData/expModelFittingCV/split/s%s.RData",  thisID)
save("partTable", file = fileName)
}
load("/Users/cyx/Documents/first_kick/wtw_timing/genData/expModelFittingCV/split/s461.RData")
nPart
partTable
nrow(thisTrialData)
146 - 5
141 / 10
nPart
nFold = 10
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
dir.create("genData/expModelFittingCV")
dir.create("genData/expModelFittingCV/split")
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
idList = hdrData$ID
n = length(idList)
set.seed(123)
for(i in 1 : n){
thisID = idList[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials &
thisTrialData$blockNum <=2,]
# determine partitions
nSkip = 5
nPart = ceiling((nrow(thisTrialData) - nSkip)/ nFold)
partTable = sapply(1 : nPart, function(i) sample(1:nFold,replace = FALSE) + (i -1) * nFold + nSkip)
fileName = sprintf("genData/expModelFittingCV/split/s%s.RData",  thisID)
save("partTable", file = fileName)
}
nFold = 10
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
dir.create("genData/expModelFittingCV")
dir.create("genData/expModelFittingCV/split")
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
n = length(ids)
set.seed(123)
for(i in 1 : n){
thisID = ids[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials &
thisTrialData$blockNum <= 2,]
# determine partitions
nSkip = 5
nPart = ceiling((nrow(thisTrialData) - nSkip)/ nFold)
partTable = sapply(1 : nPart, function(i) sample(1:nFold,replace = FALSE) + (i -1) * nFold + nSkip)
fileName = sprintf("genData/expModelFittingCV/split/s%s.RData",  thisID)
save("partTable", file = fileName)
}
nFold = 10
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getparaNames
load("wtwSettings.RData")
dir.create("genData/expModelFittingCV")
dir.create("genData/expModelFittingCV/split")
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
n = length(ids)
set.seed(123)
for(i in 1 : n){
thisID = ids[[i]]
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials &
thisTrialData$blockNum <= 2,]
# determine partitions
nSkip = 5
nPart = ceiling((nrow(thisTrialData) - nSkip)/ nFold)
partTable = sapply(1 : nPart, function(i) sample(1:nFold,replace = FALSE) + (i -1) * nFold + nSkip)
fileName = sprintf("genData/expModelFittingCV/split/s%s.RData",  thisID)
save("partTable", file = fileName)
}
>>>>>>> be8c17d8d7bc5b9a6b1fc04b15f554c28debf5cf
