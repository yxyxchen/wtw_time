load("wtwSettings.R")
load("wtwSettings.RData")
getwd()
setwd("../")
load("wtwSettings.RData")
source('~/Documents/first_kick/wtw_timing/subFxs/modelComparisonFxs.R', echo=TRUE)
source('~/Documents/first_kick/wtw_timing/expModelFittingCVdb.R', echo=TRUE)
modelName = "QL1"
isTrun = T
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
source("subFxs/helpFxs.R") # getPars
source("subFxs/loadFxs.R") # load  expPara
source("subFxs/taskFxs.R") # drawSamples
source("subFxs/repetitionFxs.R") # getRepFunction
source("subFxs/analysisFxs.R") # kmsc, trialPlot
# load summaryData
nBlock = 2
nComb = 10
load("genData/expDataAnalysis/blockData.RData")
load("genData/expDataAnalysis/kmOnGridBlock.RData")
summaryData = blockData
# load trialData since we need scheduledWait
allData = loadAllData()
hdrData = allData$hdrData
expTrialData = allData$trialData
allIDs = hdrData$ID
# re-simulate data
dir.create("figures/expModelRepitation")
dir.create(sprintf("figures/expModelRepitation/%s",modelName))
thisRep = modelRepitation(modelName, summaryData, expTrialData, nComb) # set seeds indise
# initialize
expPara = thisRep$expPara
repTrialData = thisRep$repTrialData
paraNames = getParaNames(modelName)
# determine repFun
repFun = getRepFun(modelName)
# load inividual fitted parameters
paraNames = getParaNames(modelName)
parentDir ="genData/expModelFitting"; dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara = loadExpPara(paraNames, dirName)
ids = expPara$id; nSub = length(ids)
# initialize outputs
repTrialData = vector(length = nSub * nComb, mode ='list')
repNo = matrix(1 : (nSub * nComb), nrow = nComb, ncol = nSub)
# draw nComb parameter combination samples, and simualte nComb times for each participant
set.seed(231)
ids
sIdx = 1
# prepare inputs
id = ids[[sIdx]]
paras_ = read.table(sprintf("%s/%sdb/s%d.txt", parentDir, modelName, id),sep = ",", row.names = NULL)
thisTrialData = trialData[[id]] # here we id instead of sIdx
isTrun = T
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
source("subFxs/helpFxs.R") # getPars
source("subFxs/loadFxs.R") # load  expPara
source("subFxs/taskFxs.R") # drawSamples
source("subFxs/repetitionFxs.R") # getRepFunction
source("subFxs/analysisFxs.R") # kmsc, trialPlot
# load summaryData
nBlock = 2
nComb = 10
load("genData/expDataAnalysis/blockData.RData")
load("genData/expDataAnalysis/kmOnGridBlock.RData")
summaryData = blockData
# load trialData since we need scheduledWait
allData = loadAllData()
hdrData = allData$hdrData
expTrialData = allData$trialData
allIDs = hdrData$ID
# re-simulate data
dir.create("figures/expModelRepitation")
dir.create(sprintf("figures/expModelRepitation/%s",modelName))
thisRep = modelRepitation(modelName, summaryData, expTrialData, nComb) # set seeds indise
# initialize
expPara = thisRep$expPara
repTrialData = thisRep$repTrialData
paraNames = getParaNames(modelName)
id
str(trialData)
# load trialData since we need scheduledWait
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID
for(sIdx in 1 : nSub){
# prepare inputs
id = ids[[sIdx]]
paras_ = read.table(sprintf("%s/%sdb/s%d.txt", parentDir, modelName, id),sep = ",", row.names = NULL)
thisTrialData = trialData[[id]] # here we id instead of sIdx
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# simulate nComb times
for(cbIdx in 1 : nComb){
paras = as.double(paras_[sample(1 : nrow(paras_), 1), 1 : length(paraNames)])
tempt = repFun(paras, cond, scheduledWait)
repTrialData[[repNo[cbIdx, sIdx]]] = tempt
}
}
str(trialData)
ids
length(ids)
# load inividual fitted parameters
paraNames = getParaNames(modelName)
parentDir ="genData/expModelFitting"; dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara = loadExpPara(paraNames, dirName)
ids = factor(expPara$id, levels = levels(hdrData$ID)); nSub = length(ids)
# initialize outputs
repTrialData = vector(length = nSub * nComb, mode ='list')
repNo = matrix(1 : (nSub * nComb), nrow = nComb, ncol = nSub)
# draw nComb parameter combination samples, and simualte nComb times for each participant
set.seed(231)
for(sIdx in 1 : nSub){
# prepare inputs
id = ids[[sIdx]]
paras_ = read.table(sprintf("%s/%sdb/s%d.txt", parentDir, modelName, id),sep = ",", row.names = NULL)
thisTrialData = trialData[[id]] # here we id instead of sIdx
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# simulate nComb times
for(cbIdx in 1 : nComb){
paras = as.double(paras_[sample(1 : nrow(paras_), 1), 1 : length(paraNames)])
tempt = repFun(paras, cond, scheduledWait)
repTrialData[[repNo[cbIdx, sIdx]]] = tempt
}
}
outputs = list(expPara = expPara, repTrialData = repTrialData, repNo = repNo)
for(sIdx in 1 : nSub){
# prepare inputs
id = ids[[sIdx]]
paras_ = read.table(sprintf("%s/%sdb/s%s.txt", parentDir, modelName, id),sep = ",", row.names = NULL)
thisTrialData = trialData[[id]] # here we id instead of sIdx
# excluded some trials
excluedTrials1 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrials2 = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
cond = thisTrialData$condition
scheduledWait = thisTrialData$scheduledWait
# simulate nComb times
for(cbIdx in 1 : nComb){
paras = as.double(paras_[sample(1 : nrow(paras_), 1), 1 : length(paraNames)])
tempt = repFun(paras, cond, scheduledWait)
repTrialData[[repNo[cbIdx, sIdx]]] = tempt
}
}
source('~/Documents/first_kick/wtw_timing/expModelRepitation.R', echo=TRUE)
expModelRepitation("QL1")
isTrun = T
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
source("subFxs/helpFxs.R") # getPars
source("subFxs/loadFxs.R") # load  expPara
source("subFxs/taskFxs.R") # drawSamples
source("subFxs/repetitionFxs.R") # getRepFunction
source("subFxs/analysisFxs.R") # kmsc, trialPlot
# load summaryData
nBlock = 2
nComb = 10
load("genData/expDataAnalysis/blockData.RData")
load("genData/expDataAnalysis/kmOnGridBlock.RData")
summaryData = blockData
# load trialData since we need scheduledWait
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID
# re-simulate data
dir.create("figures/expModelRepitation")
dir.create(sprintf("figures/expModelRepitation/%s",modelName))
thisRep = modelRepitation(modelName, summaryData, expTrialData, nComb) # set seeds indise
# initialize
expPara = thisRep$expPara
repTrialData = thisRep$repTrialData
paraNames = getParaNames(modelName)
useID = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
repNo = thisRep$repNo
nSub =(length(useID))
AUCRep_ = matrix(NA, nrow = nComb , ncol = nSub * nBlock)
stdWdRep_ = matrix(NA, nrow = nComb, ncol = nSub * nBlock)
kmOnGridRep_ = vector(mode = "list", length = nSub * nBlock)
plotKMSC = F
for(sIdx in 1 : nSub){
# prepare inputs
id = useID[[sIdx]]
nTrial = summaryData$nTrial[summaryData$id == id]
label = sprintf("sub%d", id)
kmOnGridMatrix = matrix(NA, nrow = length(kmGrid), ncol = nComb)
for(cIdx in 1 : nComb){
thisRepTrialData = repTrialData[[repNo[cIdx, which(thisRep$useID == id)]]]
for(bkIdx in 1 : 2){
noIdx = sIdx * 2 - 2 + bkIdx
startIdx = min(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
endIdx = max(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
kmscResults = kmsc(truncateTrials(thisRepTrialData, startIdx, endIdx), min(tMaxs), label ,plotKMSC, kmGrid)
AUCRep_[cIdx,noIdx] = kmscResults[['auc']]
stdWdRep_[cIdx, noIdx] = kmscResults$stdWd
kmOnGridMatrix[,cIdx] = kmscResults$kmOnGrid
}
}
kmOnGridRep_[[noIdx]] = kmOnGridMatrix
}
useID = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
useID
sIdx
id = useID[[sIdx]]
nTrial = summaryData$nTrial[summaryData$id == id]
label = sprintf("sub%d", id)
kmOnGridMatrix = matrix(NA, nrow = length(kmGrid), ncol = nComb)
cIdx
thisRepTrialData = repTrialData[[repNo[cIdx, which(thisRep$useID == id)]]]
repNo[cIdx, which(thisRep$useID == id)
]
repNo
which(thisRep$useID
)
id
thisRep$useID
source('~/Documents/first_kick/wtw_timing/expModelRepitation.R', echo=TRUE)
expModelRepitation("QL1")
