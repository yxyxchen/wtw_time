expPara = loadExpPara(paraNames, sprintf("genData/expModelFitting/%sdb", modelName))
useID_[[i]] = getUseID(expPara, paraNames)
}
useID = idList[apply(sapply(1 : nModel, function(i )idList %in% useID_[[i]]), MARGIN = 1,
all)]
nUse = length(useID)
# extract logEvidece_ from loo
logEvidence_ = matrix(NA, nUse, nModel)
logLik_ = matrix(NA, nUse, nModel)
pWaic_ = matrix(NA, nUse, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
for(sIdx in 1 : nUse ){
id = useID[sIdx]
fileName = sprintf("genData/expModelFitting/%sdb/s%s_waic.RData", modelName, id)
load(fileName)
logEvidence_[sIdx, m] = WAIC$elpd_waic # here is like loglikelyhood, larger the better
logLik_[sIdx, m] = WAIC$elpd_waic  + WAIC$p_waic / 2
pWaic_[sIdx, m] = WAIC$p_waic
}
}
# save output for modelComparision
output = data.frame(logEvidence_)
f= "genData/expModelFitting/logEvidenceList.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
# participants best desribed by
library("ggpubr")
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
dir.create("figures/expModelComparison")
ggsave("figures/expModelComparison/loo_nBest.png", width = 5, height =3.5)
# pWAIC
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>% ggplot(aes(model, pwaic)) + geom_boxplot() + myTheme
ggsave("figures/expModelComparison/loo_pwaic.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>%
summarise(muData = mean(pwaic), seData = sd(pwaic) / sqrt(length(pwaic)),
minData = muData - seData, maxData = muData + seData)
# analyze the relationship between behaviors and the best model
load("genData/expDataAnalysis/blockData.RData")
a = data.frame(QL2_better = logEvidence_[,2] - logEvidence_[,4],
AUCLP = blockData$AUC[blockData$condition == "LP",],
AUCHP = blockData$AUC[blockData$condition == "HP",])
logEvidence_[,2]
QL2_better = logEvidence_[,2] - logEvidence_[,4],
a = data.frame("QL2_better" = logEvidence_[,2] - logEvidence_[,4],
"AUCLP" = blockData$AUC[blockData$condition == "LP",],
"AUCHP = blockData$AUC[blockData$condition == "HP",])
# extract logEvidence, cross validation
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
ids = hdrData$ID
nSub = length(ids)
nFold = 10
logEvidence = matrix(nrow = length(ids), ncol= nModel)
for(mIdx in 1 : nModel){
modelName = modelNames[mIdx]
paraNames = getParaNames(modelName)
nPara = length(paraNames)
likFun = getLikFun(modelName)
for(sIdx in 1 : nSub){
id = ids[sIdx]
load(sprintf("genData/expModelFittingCV/split/s%s.RData", id))
thisTrialData = trialData[[id]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == conditions[1])
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == conditions[2])
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# prepare the data
nTrial = length(thisTrialData$trialEarnings)
cond = thisTrialData$cond
trialEarnings = thisTrialData$trialEarnings
scheduledWait = thisTrialData$scheduledWait
timeWaited = thisTrialData$timeWaited
timeWaited[trialEarnings != 0] = scheduledWait[trialEarnings != 0]
Ts = round(ceiling(timeWaited / stepDuration) + 1)
cvPara = loadCVPara(paraNames,
sprintf("genData/expModelFittingCV/%sdb",modelName),
pattern = sprintf("s%s_f[0-9]+_summary.txt", id))
# initialize
LL_ = vector(length = nFold)
if(length(getUseID(cvPara, paraNames)) == 10){
for(f in 1 : nFold){
# determine training end testing trials
trials = partTable[f,]
trials = trials[trials < nTrial]
junk = 1 : nTrial
trialsTrain = junk[!junk %in% trials]
paras = as.double(cvPara[f,1:nPara])
lik_ = likFun(paras, cond, trialEarnings, timeWaited)$lik_
LL_[f] = sum(sapply(1 : length(trials), function(i){
trial = trials[i]
if(trialEarnings[trial] > 0){
junk = log(lik_[1 : max(Ts[trial]-1, 1), trial])
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
if(Ts[trial] > 2){
junk = c(log(lik_[1:max(Ts[trial] - 2,1), trial]), log(1-lik_[Ts[trial] - 1, trial]))
junk[is.infinite(junk)] = -10000
sum(junk)
}else{
junk = log(1-lik_[Ts[trial] - 1, trial])
junk
}
}
}))
}
logEvidence[sIdx, mIdx] = sum(LL_)
}
}
}
a = data.frame("QL2_better" = logEvidence_[,2] - logEvidence_[,4],
"AUCLP" = blockData$AUC[blockData$condition == "LP",],
"AUCHP" = blockData$AUC[blockData$condition == "HP",])
a
a = cbind("QL2_better" = logEvidence_[,2] - logEvidence_[,4],
"AUCLP" = blockData$AUC[blockData$condition == "LP",],
"AUCHP" = blockData$AUC[blockData$condition == "HP",])
a
cbind(logEvidence_[,2] - logEvidence_[,4],
blockData$AUC[blockData$condition == "HP",],
"AUCHP" = blockData$AUC[blockData$condition == "LP",])
a = data.frame("QL2_better" = logEvidence_[,2] - logEvidence_[,4],
"AUCLP" = blockData$AUC[blockData$condition == "LP"],
"AUCHP" = blockData$AUC[blockData$condition == "HP"])
View(a)
logEvidence_[,2] - logEvidence_[,4]
plot(a$QL2_better, a$AUCLP)
grap
graphics.off()
plot(a$QL2_better, a$AUCLP)
plot(a$AUCLP, a$QL2_better)
plot(a$AUCHP, a$QL2_better)
plot(a$AUCLP, a$QL2_better)
hist(a$QL2_better)
mean(a$QL2_better)
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
bestNums
# load model names
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
load("genData/expDataAnalysis/blockData.RData")
# select common useID
idList = hdrData$ID
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
useID_ = vector(mode = "list", length = nModel)
source("subFxs/loadFxs.R")
for(i in 1 : nModel){
modelName = modelNames[i]
paraNames = getParaNames(modelName)
expPara = loadExpPara(paraNames, sprintf("genData/expModelFitting/%sdb", modelName))
useID_[[i]] = getUseID(expPara, paraNames)
}
useID = idList[apply(sapply(1 : nModel, function(i )idList %in% useID_[[i]]), MARGIN = 1,
all)]
nUse = length(useID)
# extract logEvidece_ from loo
logEvidence_ = matrix(NA, nUse, nModel)
logLik_ = matrix(NA, nUse, nModel)
pWaic_ = matrix(NA, nUse, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
for(sIdx in 1 : nUse ){
id = useID[sIdx]
fileName = sprintf("genData/expModelFitting/%sdb/s%s_waic.RData", modelName, id)
load(fileName)
logEvidence_[sIdx, m] = WAIC$elpd_waic # here is like loglikelyhood, larger the better
logLik_[sIdx, m] = WAIC$elpd_waic  + WAIC$p_waic / 2
pWaic_[sIdx, m] = WAIC$p_waic
}
}
# save output for modelComparision
output = data.frame(logEvidence_)
f= "genData/expModelFitting/logEvidenceList.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
View(logEvidence)
View(logEvidence_)
logEvidence_[,2] - logEvidence_[,4]
hist(logEvidence_[,2] - logEvidence_[,4])
graphics.off()
hist(logEvidence_[,2] - logEvidence_[,4])
median(logEvidence_[,2] - logEvidence_[,4])
plot(a$QL2_better, a$AUCHP)
plot(a$AUCLP, a$QL2_better)
plot(expPara$gamma, a$QL2_better)
plot(expPara$gamma, a$QL2_better)
a
plot(expPara[,"gamma"], a$QL2_better)
graphics.off()
plot(expPara[,"gamma"], a$QL2_better)
expPara[,"gamma"]
expPara_QL2 = loadExpPara(getParaNames("QL2"),
dirName = sprintf("genData/expModelFitting/%sdb", modelName))
plot(expPara_QL2[,"gamma"], a$QL2_better)
a$QL2_better
expPara_QL2[,"gamma"]
expPara_QL2 = loadExpPara(getParaNames("QL2"),
dirName = sprintf("genData/expModelFitting/%sdb", modelName))
expPara_QL2
getParaNames("QL2")
getParaNames("QL2")
getParaNames("QL2")
# libraries and scripts
library("stringr")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
source("subFxs/modelComparisonFxs.R")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
# load model names
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
load("genData/expDataAnalysis/blockData.RData")
# select common useID
idList = hdrData$ID
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
useID_ = vector(mode = "list", length = nModel)
source("subFxs/loadFxs.R")
for(i in 1 : nModel){
modelName = modelNames[i]
paraNames = getParaNames(modelName)
expPara = loadExpPara(paraNames, sprintf("genData/expModelFitting/%sdb", modelName))
useID_[[i]] = getUseID(expPara, paraNames)
}
useID = idList[apply(sapply(1 : nModel, function(i )idList %in% useID_[[i]]), MARGIN = 1,
all)]
nUse = length(useID)
# extract logEvidece_ from loo
logEvidence_ = matrix(NA, nUse, nModel)
logLik_ = matrix(NA, nUse, nModel)
pWaic_ = matrix(NA, nUse, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
for(sIdx in 1 : nUse ){
id = useID[sIdx]
fileName = sprintf("genData/expModelFitting/%sdb/s%s_waic.RData", modelName, id)
load(fileName)
logEvidence_[sIdx, m] = WAIC$elpd_waic # here is like loglikelyhood, larger the better
logLik_[sIdx, m] = WAIC$elpd_waic  + WAIC$p_waic / 2
pWaic_[sIdx, m] = WAIC$p_waic
}
}
# save output for modelComparision
output = data.frame(logEvidence_)
f= "genData/expModelFitting/logEvidenceList.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
# participants best desribed by
library("ggpubr")
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
dir.create("figures/expModelComparison")
ggsave("figures/expModelComparison/loo_nBest.png", width = 5, height =3.5)
# pWAIC
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>% ggplot(aes(model, pwaic)) + geom_boxplot() + myTheme
ggsave("figures/expModelComparison/loo_pwaic.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>%
summarise(muData = mean(pwaic), seData = sd(pwaic) / sqrt(length(pwaic)),
minData = muData - seData, maxData = muData + seData)
# analyze the relationship between behaviors and the best model
load("genData/expDataAnalysis/blockData.RData")
a = data.frame("QL2_better" = logEvidence_[,2] - logEvidence_[,4],
"AUCLP" = blockData$AUC[blockData$condition == "LP"],
"AUCHP" = blockData$AUC[blockData$condition == "HP"])
plot(a$AUCLP, a$QL2_better)
paraNames
# analyze the relationship between behaviors and the best model
load("genData/expDataAnalysis/blockData.RData")
a = data.frame("QL2_better" = logEvidence_[,2] - logEvidence_[,4],
"AUCLP" = blockData$AUC[blockData$condition == "LP"],
"AUCHP" = blockData$AUC[blockData$condition == "HP"])
plot(a$AUCLP, a$QL2_better)
expPara_QL2 = loadExpPara(getParaNames("QL2"),
dirName = sprintf("genData/expModelFitting/%sdb", modelName))
plot(expPara_QL2[,"gamma"], a$QL2_better)
expPara_QL2[,"gamma"]
getParaNames("QL2")
expPara_QL2 = loadExpPara(getParaNames("QL2"),
dirName = sprintf("genData/expModelFitting/%sdb", "QL2"))
plot(expPara_QL2[,"gamma"], a$QL2_better)
# extract logEvidence, cross validation
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
expPara_QL2 = loadExpPara(getParaNames("QL2"),
dirName = sprintf("genData/expModelFitting/%sdb", "QL2"))
plot(expPara_QL2[,"gamma"], a$QL2_better)
plot(expPara_QL2[,"prior"], a$QL2_better)
idsa
ids
# analyze the relationship between behaviors and the best model
bestQL2 = ids[apply(logEvidence_, MARGIN = 1, function(x), which.max(x) == 1)]
bestQL2
ids[apply(logEvidence_, MARGIN = 1, function(x) which.max(x) == 1)]
ids[apply(logEvidence_, MARGIN = 1, function(x) which.max(x) == which(modelNames == "QL2"))]
bestNums
# in this dataset, only trials within the 7 mins will be kept. Therefore, we don't need to delete any data
# determine whether use truncated data
isTrun = T
# load libraries
source('subFxs/loadFxs.R') # for loading data
source('subFxs/analysisFxs.R') # for analysis
source("subFxs/plotThemes.R")
library("ggplot2")
library('dplyr')
dir.create("genData")
dir.create("genData/expDataAnalysis")
# load setting parameters
load("wtwSettings.RData")
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for',n,'subjects.\n')
# define nBlock
nBlock = 2
# control which individual-level plots to generate
plotTrialwiseData = T
plotKMSC = F
plotWTW = F
# parameter for longtermR
window = 2 * 60
stepLen = 2 * 60
nWindow = (blockSecs - window) / stepLen + 1
# initialize outputs, organised by block
AUC = numeric(length =n * nBlock)
totalEarnings =  numeric(length =n * nBlock)
nExclude =  numeric(length =n * nBlock)
nAction = numeric(length =n * nBlock)
wtwEarly = numeric(length =n * nBlock)
timeWTW_ = vector(mode = "list", length = n * nBlock)
trialWTW_ = vector(mode = "list", length = n * nBlock)
kmOnGrid_ = vector(mode = "list", length = n * nBlock)
trialEndTime_ = vector(mode = "list", length = n * nBlock)
trialReRate_ = vector(mode = "list", length = n * nBlock)
longtermR_ = matrix(NA, nrow = nWindow, ncol = n * nBlock)
shorttermR_ = matrix(NA, nrow = nWindow, ncol = n * nBlock)
stdQuitTime = numeric(length =n * nBlock)
cvQuitTime = numeric(length =n * nBlock)
muQuitTime = numeric(length =n * nBlock)
nQuit = numeric(length =n * nBlock)
nTrial = numeric(length =n * nBlock)
stdWd = numeric(length =n * nBlock) # standard deviation from the survival curve for the whole block
cvWd =  numeric(length =n * nBlock)
sIdx = 4
thisID = allIDs[sIdx]
bkIdx = 1
noIdx = (sIdx - 1) * nBlock + bkIdx #
# select data
thisTrialData = trialData[[thisID]]
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
cond = unique(thisTrialData$condition)
cIdx = ifelse(cond == "HP", 1, 2)
# truncate the last min(tMaxs) seconds
if(isTrun){
excluedTrials = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[cIdx]))
nExclude[[noIdx]] = length(excluedTrials)
if( nExclude[[noIdx]] > 0){
includeEnd = min(excluedTrials) - 1
}else{
includeEnd = length(thisTrialData$blockNum)
}
thisTrialData = truncateTrials(thisTrialData, 1, includeEnd)
}
# generate arguments for later analysis
label = sprintf('Subject %s, Cond %s, %s',thisID, unique(thisTrialData$condition), hdrData$stress[sIdx])
tMax = min(tMaxs)
# calcualte totalEarnings
totalEarnings[noIdx] =  sum(thisTrialData$trialEarnings)
timeWaited = thisTrialData$timeWaited
trialEarnings = thisTrialData$trialEarnings
scheduledWait = thisTrialData$scheduledWait
timeWaited[trialEarnings > loseValue] = scheduledWait[trialEarnings > loseValue]
nAction[noIdx] = sum(round(ifelse(trialEarnings > loseValue, ceiling(timeWaited / stepDuration), floor(timeWaited / stepDuration) + 1)))
nTrial[noIdx] = length(timeWaited)
# calculate varQuitTime
stdQuitTime[noIdx] = ifelse(totalEarnings[noIdx] == 0, NA, sd(timeWaited[trialEarnings == 0]))
cvQuitTime[noIdx] = ifelse(totalEarnings[noIdx] == 0, NA, sd(timeWaited[trialEarnings == 0]) / mean(timeWaited[trialEarnings == 0]))
muQuitTime[noIdx] = mean(timeWaited[trialEarnings == 0])
nQuit[noIdx] = sum(trialEarnings == 0)
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
readline(prompt = paste('subject',thisID, "block", bkIdx, '(hit ENTER to continue)'))
graphics.off()
}
bestQL2 = ids[apply(logEvidence_, MARGIN = 1, function(x) which.max(x) == which(modelNames == "QL2"))]
ids
bestQL2
thisID = "567"
thisID = allIDs[sIdx]
bkIdx = 1
noIdx = (sIdx - 1) * nBlock + bkIdx #
# select data
thisTrialData = trialData[[thisID]]
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
cond = unique(thisTrialData$condition)
cIdx = ifelse(cond == "HP", 1, 2)
# truncate the last min(tMaxs) seconds
if(isTrun){
excluedTrials = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[cIdx]))
nExclude[[noIdx]] = length(excluedTrials)
if( nExclude[[noIdx]] > 0){
includeEnd = min(excluedTrials) - 1
}else{
includeEnd = length(thisTrialData$blockNum)
}
thisTrialData = truncateTrials(thisTrialData, 1, includeEnd)
}
# generate arguments for later analysis
label = sprintf('Subject %s, Cond %s, %s',thisID, unique(thisTrialData$condition), hdrData$stress[sIdx])
tMax = min(tMaxs)
# calcualte totalEarnings
totalEarnings[noIdx] =  sum(thisTrialData$trialEarnings)
timeWaited = thisTrialData$timeWaited
trialEarnings = thisTrialData$trialEarnings
scheduledWait = thisTrialData$scheduledWait
timeWaited[trialEarnings > loseValue] = scheduledWait[trialEarnings > loseValue]
nAction[noIdx] = sum(round(ifelse(trialEarnings > loseValue, ceiling(timeWaited / stepDuration), floor(timeWaited / stepDuration) + 1)))
nTrial[noIdx] = length(timeWaited)
# calculate varQuitTime
stdQuitTime[noIdx] = ifelse(totalEarnings[noIdx] == 0, NA, sd(timeWaited[trialEarnings == 0]))
cvQuitTime[noIdx] = ifelse(totalEarnings[noIdx] == 0, NA, sd(timeWaited[trialEarnings == 0]) / mean(timeWaited[trialEarnings == 0]))
muQuitTime[noIdx] = mean(timeWaited[trialEarnings == 0])
nQuit[noIdx] = sum(trialEarnings == 0)
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
readline(prompt = paste('subject',thisID, "block", bkIdx, '(hit ENTER to continue)'))
graphics.off()
}
kmscResults = kmsc(thisTrialData,min(tMaxs),label,plotKMSC, kmGrid)
AUC[noIdx] = kmscResults[['auc']]
kmOnGrid_[[noIdx]] = kmscResults$kmOnGrid
stdWd[noIdx] = kmscResults$stdWd
cvWd[noIdx] = kmscResults$stdWd / kmscResults$auc
if (plotKMSC) {
readline(prompt = paste('subject',thisID, "block", bkIdx, '(hit ENTER to continue)'))
graphics.off()
}
readline(prompt = paste('subject',thisID, "block", bkIdx, '(hit ENTER to continue)'))
thisID = allIDs[sIdx]
noIdx = (sIdx - 1) * nBlock + bkIdx #
# select data
thisTrialData = trialData[[thisID]]
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
cond = unique(thisTrialData$condition)
cIdx = ifelse(cond == "HP", 1, 2)
# truncate the last min(tMaxs) seconds
if(isTrun){
excluedTrials = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[cIdx]))
nExclude[[noIdx]] = length(excluedTrials)
if( nExclude[[noIdx]] > 0){
includeEnd = min(excluedTrials) - 1
}else{
includeEnd = length(thisTrialData$blockNum)
}
thisTrialData = truncateTrials(thisTrialData, 1, includeEnd)
}
# generate arguments for later analysis
label = sprintf('Subject %s, Cond %s, %s',thisID, unique(thisTrialData$condition), hdrData$stress[sIdx])
tMax = min(tMaxs)
# calcualte totalEarnings
totalEarnings[noIdx] =  sum(thisTrialData$trialEarnings)
timeWaited = thisTrialData$timeWaited
trialEarnings = thisTrialData$trialEarnings
scheduledWait = thisTrialData$scheduledWait
timeWaited[trialEarnings > loseValue] = scheduledWait[trialEarnings > loseValue]
nAction[noIdx] = sum(round(ifelse(trialEarnings > loseValue, ceiling(timeWaited / stepDuration), floor(timeWaited / stepDuration) + 1)))
nTrial[noIdx] = length(timeWaited)
# calculate varQuitTime
stdQuitTime[noIdx] = ifelse(totalEarnings[noIdx] == 0, NA, sd(timeWaited[trialEarnings == 0]))
cvQuitTime[noIdx] = ifelse(totalEarnings[noIdx] == 0, NA, sd(timeWaited[trialEarnings == 0]) / mean(timeWaited[trialEarnings == 0]))
muQuitTime[noIdx] = mean(timeWaited[trialEarnings == 0])
nQuit[noIdx] = sum(trialEarnings == 0)
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
readline(prompt = paste('subject',thisID, "block", bkIdx, '(hit ENTER to continue)'))
graphics.off()
}
