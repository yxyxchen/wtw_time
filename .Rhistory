for(sIdx in 1 : nSub){
# prepare inputs
id = useID[[sIdx]]
nTrial = summaryData$nTrial[summaryData$id == id]
label = sprintf("sub%d", id)
kmOnGridMatrix = matrix(NA, nrow = length(kmGrid), ncol = nComb)
for(cIdx in 1 : nComb){
thisRepTrialData = repTrialData[[repNo[cIdx, which(ids == id)]]]
for(bkIdx in 1 : 2){
noIdx = sIdx * 2 - 2 + bkIdx
startIdx = min(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
endIdx = max(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
kmscResults = kmsc(truncateTrials(thisRepTrialData, startIdx, endIdx), min(tMaxs), label ,plotKMSC, kmGrid)
AUCRep_[cIdx,noIdx] = kmscResults[['auc']]
stdWdRep_[cIdx, noIdx] = kmscResults$stdWd
kmOnGridMatrix[,cIdx] = kmscResults$kmOnGrid
}
}
kmOnGridRep_[[noIdx]] = kmOnGridMatrix
}
# compare emipirical and reproduced AUC
muAUCRep = apply(AUCRep_, MARGIN = 2, mean);stdAUCRep = apply(AUCRep_, MARGIN = 2, sd)
minAUCRep = muAUCRep - stdAUCRep;maxAUCRep = muAUCRep + stdAUCRep
muStdWdRep = apply(stdWdRep_, MARGIN = 2, mean);stdStdWdRep = apply(stdWdRep_, MARGIN = 2, sd)
minStdWdRep = muStdWdRep - stdStdWdRep;maxStdWdRep = muStdWdRep + stdStdWdRep
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWD = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(AUC, muAUCRep)) +  geom_errorbar(aes(ymin = minAUCRep, ymax = maxAUCRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 22)) + ylim(c(-2, 22)) +
ylab("Model-generated (s)") + xlab("Observed (s)") + ggtitle(sprintf("Average WTW, n = %d", length(useID))) +
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/AUC_AUCRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWD = summaryData$stdWd[summaryData$id %in% useID],
blockNum = summaryData$blockNum[summaryData$id %in% useID]) %>%
ggplot(aes(AUC, muAUCRep)) +  geom_errorbar(aes(ymin = minAUCRep, ymax = maxAUCRep), color = "grey") +
geom_point(size = 2) + facet_grid(~blockNum) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 22)) + ylim(c(-2, 22)) +
ylab("Model-generated (s)") + xlab("Observed (s)") + ggtitle(sprintf("Average WTW, n = %d", length(useID))) +
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/AUC_AUCRep2.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# I don't know
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
blockNum = summaryData$blockNum[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~blockNum) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep2.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# compare emipircal and reproduced trialPlot, for one participant
id = 1
sIdx = which(useID  == id)
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
ggsave(sprintf("figures/expModelRepitation/%s/actual_data_%d.png", modelName, id),
width = 5, height = 4)
with(thisRep,{
id = 1
sIdx = which(useID  == id)
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data__%d.png", modelName, id),
width = 5, height = 4)
})
repNo[1,sIdx]
sIdx = which(useID  == id)
useID
with(thisRep,{
id = 461
sIdx = which(useID  == id)
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data__%d.png", modelName, id),
width = 5, height = 4)
})
useID
# compare emipircal and reproduced trialPlot, for one participant
id = 478
sIdx = which(useID  == id)
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
ggsave(sprintf("figures/expModelRepitation/%s/actual_data_%d.png", modelName, id),
width = 5, height = 4)
with(thisRep,{
id = 478
sIdx = which(useID  == id)
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data__%d.png", modelName, id),
width = 5, height = 4)
})
id = 478
sIdx = which(useID  == id)
sIdx
modelName
# determine repFun
repFun = getRepFun(modelName)
repFun
id = 478
sIdx = which(useID  == id)
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
id = 478
sIdx = which(useID  == id)
tempt = repTrialData[[repNo[2,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
modelName
paras
useID
# compare emipircal and reproduced trialPlot, for one participant
id = 531
sIdx = which(useID  == id)
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
useID
str(trialData)
sIdx = 3
id = useID[sIdx]
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
with(thisRep,{
sIdx = 3
id = useID[sIdx]
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data__%d.png", modelName, id),
width = 5, height = 4)
})
id
with(thisRep,{
sIdx = 3
id = useID[sIdx]
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data__%d.png", modelName, id),
width = 5, height = 4)
})
sIdx = 3
id = useID[sIdx]
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
ggsave(sprintf("figures/expModelRepitation/%s/actual_data_%s.png", modelName, id),
width = 5, height = 4)
with(thisRep,{
sIdx = 3
id = useID[sIdx]
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data_%s.png", modelName, id),
width = 5, height = 4)
})
source('~/Documents/first_kick/wtw_timing/expModelRepitation.R', echo=TRUE)
expModelRepitation("RL1")
expModelRepitation("RL2")
source('~/Documents/first_kick/wtw_SDG_brandNew/simModelFittingdb.R', echo=TRUE)
source('~/Documents/first_kick/wtw_timing/expModelRepitation.R', echo=TRUE)
expModelRepitation("RL1")
getwd()
modelName = "RL1"
isTrun = T
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
source("subFxs/helpFxs.R") # getPars
source("subFxs/loadFxs.R") # load  expPara
source("subFxs/taskFxs.R") # drawSamples
source("subFxs/repetitionFxs.R") # getRepFunction
source("subFxs/analysisFxs.R") # kmsc, trialPlot
# load summaryData
nBlock = 2
nComb = 10
load("genData/expDataAnalysis/blockData.RData")
load("genData/expDataAnalysis/kmOnGridBlock.RData")
summaryData = blockData
# load trialData since we need scheduledWait
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
# re-simulate data
dir.create("figures/expModelRepitation")
dir.create(sprintf("figures/expModelRepitation/%s",modelName))
thisRep = modelRepitation(modelName, summaryData, trialData, nComb) # set seeds indise
# initialize
expPara = thisRep$expPara
View(expPara)
repTrialData = thisRep$repTrialData
paraNames = getParaNames(modelName)
useID = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
repNo = thisRep$repNo
nSub =(length(useID))
AUCRep_ = matrix(NA, nrow = nComb , ncol = nSub * nBlock)
stdWdRep_ = matrix(NA, nrow = nComb, ncol = nSub * nBlock)
kmOnGridRep_ = vector(mode = "list", length = nSub * nBlock)
plotKMSC = F
for(sIdx in 1 : nSub){
# prepare inputs
id = useID[[sIdx]]
nTrial = summaryData$nTrial[summaryData$id == id]
label = sprintf("sub%d", id)
kmOnGridMatrix = matrix(NA, nrow = length(kmGrid), ncol = nComb)
for(cIdx in 1 : nComb){
thisRepTrialData = repTrialData[[repNo[cIdx, which(ids == id)]]]
for(bkIdx in 1 : 2){
noIdx = sIdx * 2 - 2 + bkIdx
startIdx = min(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
endIdx = max(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
kmscResults = kmsc(truncateTrials(thisRepTrialData, startIdx, endIdx), min(tMaxs), label ,plotKMSC, kmGrid)
AUCRep_[cIdx,noIdx] = kmscResults[['auc']]
stdWdRep_[cIdx, noIdx] = kmscResults$stdWd
kmOnGridMatrix[,cIdx] = kmscResults$kmOnGrid
}
}
kmOnGridRep_[[noIdx]] = kmOnGridMatrix
}
# compare emipirical and reproduced AUC
muAUCRep = apply(AUCRep_, MARGIN = 2, mean);stdAUCRep = apply(AUCRep_, MARGIN = 2, sd)
minAUCRep = muAUCRep - stdAUCRep;maxAUCRep = muAUCRep + stdAUCRep
muStdWdRep = apply(stdWdRep_, MARGIN = 2, mean);stdStdWdRep = apply(stdWdRep_, MARGIN = 2, sd)
minStdWdRep = muStdWdRep - stdStdWdRep;maxStdWdRep = muStdWdRep + stdStdWdRep
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWD = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(AUC, muAUCRep)) +  geom_errorbar(aes(ymin = minAUCRep, ymax = maxAUCRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 22)) + ylim(c(-2, 22)) +
ylab("Model-generated (s)") + xlab("Observed (s)") + ggtitle(sprintf("Average WTW, n = %d", length(useID))) +
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/AUC_AUCRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# I don't know
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
sIdx = 3
id = useID[sIdx]
cond = unique(summaryData$condition[summaryData$id == id])
label = sprintf("Sub %d, %s", id, cond)
if(isTrun){
junk = trialData[[id]]
# excluded some trials
excluedTrials1 = which(junk$trialStartTime > (blockSecs - tMaxs[1]) &
junk$condition == conditions[1])
excluedTrials2 = which(junk$trialStartTime > (blockSecs - tMaxs[2]) &
junk$condition == conditions[2])
excluedTrials = c(excluedTrials1, excluedTrials2)
junk = junk[!(1 : nrow(junk)) %in% excluedTrials,]
}
junk = block2session(junk)
trialPlots(junk, "Observed Data")
ggsave(sprintf("figures/expModelRepitation/%s/actual_data_%s.png", modelName, id),
width = 5, height = 4)
with(thisRep,{
sIdx = 3
id = useID[sIdx]
tempt = repTrialData[[repNo[1,sIdx]]]
tempt$timeWaited =  matrix(unlist(lapply(1:nComb, function(i) repTrialData[[repNo[i,sIdx]]]$timeWaited)), ncol = nComb) %>%
apply(MARGIN  = 1, FUN = mean)
tempt = within(tempt, sapply(1 : length(timeWaited), function(i) ifelse(timeWaited[i] >= scheduledWait[i], tokenValue, 0)))
tempt$blockNum = junk$blockNum
trialPlots(tempt,"Model-generated Data")
ggsave(sprintf("figures/expModelRepitation/%s/sim_data_%s.png", modelName, id),
width = 5, height = 4)
})
}
expModelRepitation("QL1")
expModelRepitation("QL2")
# libraries and scripts
library("stringr")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
source("subFxs/modelComparisonFxs.R")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
# load model names
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
load("genData/expDataAnalysis/blockData.RData")
# select common useID
idList = hdrData$ID
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
useID_ = vector(mode = "list", length = nModel)
source("subFxs/loadFxs.R")
for(i in 1 : nModel){
modelName = modelNames[i]
paraNames = getParaNames(modelName)
expPara = loadExpPara(paraNames, sprintf("genData/simModelFitting/%sdb", modelName))
useID_[[i]] = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
}
useID = idList[apply(sapply(1 : nModel, function(i )idList %in% useID_[[i]]), MARGIN = 1,
all)]
nUse = length(useID)
# libraries and scripts
library("stringr")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
source("subFxs/modelComparisonFxs.R")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
# load model names
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
load("genData/expDataAnalysis/blockData.RData")
# select common useID
idList = hdrData$ID
modelNames = factor(c("QL1", "QL2", "RL1", "RL2", "BL"),
levels = c("QL1", "QL2", "RL1", "RL2", "BL"))
nModel = length(modelNames)
useID_ = vector(mode = "list", length = nModel)
source("subFxs/loadFxs.R")
for(i in 1 : nModel){
modelName = modelNames[i]
paraNames = getParaNames(modelName)
expPara = loadExpPara(paraNames, sprintf("genData/simModelFitting/%sdb", modelName))
useID_[[i]] = factor(getUseID(expPara, paraNames), levels = levels(hdrData$ID))
}
useID = idList[apply(sapply(1 : nModel, function(i )idList %in% useID_[[i]]), MARGIN = 1,
all)]
nUse = length(useID)
useID
nUse
# extract logEvidece_ from loo
logEvidence_ = matrix(NA, nUse, nModel)
logLik_ = matrix(NA, nUse, nModel)
pWaic_ = matrix(NA, nUse, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
for(sIdx in 1 : nUse ){
id = useID[sIdx]
fileName = sprintf("genData/simModelFitting/%sdb/s%s_waic.RData", modelName, id)
load(fileName)
logEvidence_[sIdx, m] = WAIC$elpd_waic # here is like loglikelyhood, larger the better
logLik_[sIdx, m] = WAIC$elpd_waic  + WAIC$p_waic / 2
pWaic_[sIdx, m] = WAIC$p_waic
}
}
d
d
# save output for modelComparision
output = data.frame(logEvidence_)
f= "genData/simModelFitting/logEvidenceList.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
# participants best desribed by
library("ggpubr")
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>% ggplot(aes(model, pwaic)) + geom_boxplot() + myTheme
ggsave("figures/expModelComparison/loo_pwaic.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>%
summarise(muData = mean(pwaic), seData = sd(pwaic) / sqrt(length(pwaic)),
minData = muData - seData, maxData = muData + seData)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>% ggplot(aes(model, pwaic)) + geom_boxplot() + myTheme
ggsave("figures/simModelComparison/loo_pwaic.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>%
summarise(muData = mean(pwaic), seData = sd(pwaic) / sqrt(length(pwaic)),
minData = muData - seData, maxData = muData + seData)
# participants best desribed by
library("ggpubr")
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Best described (n = %d)", nUse))+
myTheme
dir.create("figures/simModelComparison")
ggsave("figures/simModelComparison/loo_nBest.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>% ggplot(aes(model, pwaic)) + geom_boxplot() + myTheme
ggsave("figures/simModelComparison/loo_pwaic.png", width = 5, height =3.5)
data.frame(pwaic = as.vector(pWaic_), model = rep(modelNames, each = nUse)) %>%
group_by(model) %>%
summarise(muData = mean(pwaic), seData = sd(pwaic) / sqrt(length(pwaic)),
minData = muData - seData, maxData = muData + seData)
