useID = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
repNo = thisRep$repNo
nSub =(length(useID))
AUCRep_ = matrix(NA, nrow = nComb , ncol = nSub * nBlock)
stdWdRep_ = matrix(NA, nrow = nComb, ncol = nSub * nBlock)
kmOnGridRep_ = vector(mode = "list", length = nSub * nBlock)
plotKMSC = F
for(sIdx in 1 : nSub){
# prepare inputs
id = useID[[sIdx]]
nTrial = summaryData$nTrial[summaryData$id == id]
label = sprintf("sub%d", id)
kmOnGridMatrix = matrix(NA, nrow = length(kmGrid), ncol = nComb)
for(cIdx in 1 : nComb){
thisRepTrialData = repTrialData[[repNo[cIdx, which(thisRep$useID == id)]]]
for(bkIdx in 1 : 2){
noIdx = sIdx * 2 - 2 + bkIdx
startIdx = min(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
endIdx = max(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
kmscResults = kmsc(truncateTrials(thisRepTrialData, startIdx, endIdx), min(tMaxs), label ,plotKMSC, kmGrid)
AUCRep_[cIdx,noIdx] = kmscResults[['auc']]
stdWdRep_[cIdx, noIdx] = kmscResults$stdWd
kmOnGridMatrix[,cIdx] = kmscResults$kmOnGrid
}
}
kmOnGridRep_[[noIdx]] = kmOnGridMatrix
}
# compare emipirical and reproduced AUC
muAUCRep = apply(AUCRep_, MARGIN = 2, mean);stdAUCRep = apply(AUCRep_, MARGIN = 2, sd)
minAUCRep = muAUCRep - stdAUCRep;maxAUCRep = muAUCRep + stdAUCRep
muStdWdRep = apply(stdWdRep_, MARGIN = 2, mean);stdStdWdRep = apply(stdWdRep_, MARGIN = 2, sd)
minStdWdRep = muStdWdRep - stdStdWdRep;maxStdWdRep = muStdWdRep + stdStdWdRep
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWD = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(AUC, muAUCRep)) +  geom_errorbar(aes(ymin = minAUCRep, ymax = maxAUCRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 22)) + ylim(c(-2, 22)) +
ylab("Model-generated (s)") + xlab("Observed (s)") + ggtitle(sprintf("Average WTW, n = %d", length(useID))) +
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/AUC_AUCRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# I don't know
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# re-simulate data
modelName = "RlearnL"
dir.create("figures/expModelRepitation")
dir.create(sprintf("figures/expModelRepitation/%s",modelName))
thisRep = modelRepitation(modelName, summaryData, expTrialData, nComb) # set seeds indise
# initialize
expPara = thisRep$expPara
repTrialData = thisRep$repTrialData
paras = getParas(modelName)
useID = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
repNo = thisRep$repNo
nSub =(length(useID))
AUCRep_ = matrix(NA, nrow = nComb , ncol = nSub * nBlock)
stdWdRep_ = matrix(NA, nrow = nComb, ncol = nSub * nBlock)
kmOnGridRep_ = vector(mode = "list", length = nSub * nBlock)
plotKMSC = F
for(sIdx in 1 : nSub){
# prepare inputs
id = useID[[sIdx]]
nTrial = summaryData$nTrial[summaryData$id == id]
label = sprintf("sub%d", id)
kmOnGridMatrix = matrix(NA, nrow = length(kmGrid), ncol = nComb)
for(cIdx in 1 : nComb){
thisRepTrialData = repTrialData[[repNo[cIdx, which(thisRep$useID == id)]]]
for(bkIdx in 1 : 2){
noIdx = sIdx * 2 - 2 + bkIdx
startIdx = min(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
endIdx = max(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
kmscResults = kmsc(truncateTrials(thisRepTrialData, startIdx, endIdx), min(tMaxs), label ,plotKMSC, kmGrid)
AUCRep_[cIdx,noIdx] = kmscResults[['auc']]
stdWdRep_[cIdx, noIdx] = kmscResults$stdWd
kmOnGridMatrix[,cIdx] = kmscResults$kmOnGrid
}
}
kmOnGridRep_[[noIdx]] = kmOnGridMatrix
}
# compare emipirical and reproduced AUC
muAUCRep = apply(AUCRep_, MARGIN = 2, mean);stdAUCRep = apply(AUCRep_, MARGIN = 2, sd)
minAUCRep = muAUCRep - stdAUCRep;maxAUCRep = muAUCRep + stdAUCRep
muStdWdRep = apply(stdWdRep_, MARGIN = 2, mean);stdStdWdRep = apply(stdWdRep_, MARGIN = 2, sd)
minStdWdRep = muStdWdRep - stdStdWdRep;maxStdWdRep = muStdWdRep + stdStdWdRep
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWD = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(AUC, muAUCRep)) +  geom_errorbar(aes(ymin = minAUCRep, ymax = maxAUCRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 22)) + ylim(c(-2, 22)) +
ylab("Model-generated (s)") + xlab("Observed (s)") + ggtitle(sprintf("Average WTW, n = %d", length(useID))) +
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/AUC_AUCRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# I don't know
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
library("ggplot2")
library("dplyr")
library("tidyr")
library("Hmisc")
library("coin")
source("subFxs/plotThemes.R")
source("subFxs/loadFxs.R") # load blockData and expPara
source("subFxs/helpFxs.R") # getParas
source("subFxs/analysisFxs.R") # plotCorrelation and getCorrelation
load("wtwSettings.RData")
# load trialData since we need scheduledWait
allData = loadAllData()
hdrData = allData$hdrData
expTrialData = allData$trialData
allIDs = hdrData$ID
modelName = "PRbsNC"
# create output directories
dir.create("figures/expParaAnalysis")
saveDir = sprintf("figures/expParaAnalysis/%s", modelName)
dir.create(saveDir)
# load blockdata data
load("genData/expDataAnalysis/blockData.RData")
# load expPara
paras = getParas(modelName)
nPara = length(paras)
parentDir = "genData/expModelFitting"
dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara= loadExpPara(paras, dirName)
useID = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
sort(expPara$phi)
sort(expPara$phiP)
sort(expPara$tau)
sort(expPara$zeroPoint)
sort(expPara$gamma)
modelName = "PRbs"
# create output directories
dir.create("figures/expParaAnalysis")
saveDir = sprintf("figures/expParaAnalysis/%s", modelName)
dir.create(saveDir)
# load blockdata data
load("genData/expDataAnalysis/blockData.RData")
# load expPara
paras = getParas(modelName)
nPara = length(paras)
parentDir = "genData/expModelFitting"
dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara= loadExpPara(paras, dirName)
useID = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
hist(expPara$phi)
sort(expPara$phi)
sort(expPara$phiP)
sort(expPara$tau)
sort(expPara$zeroPoint)
sort(expPara$gamma)
modelName = "Rlearn"
# create output directories
dir.create("figures/expParaAnalysis")
saveDir = sprintf("figures/expParaAnalysis/%s", modelName)
dir.create(saveDir)
# load blockdata data
load("genData/expDataAnalysis/blockData.RData")
# load expPara
paras = getParas(modelName)
nPara = length(paras)
parentDir = "genData/expModelFitting"
dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara= loadExpPara(paras, dirName)
useID = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
sort(expPara$phi)
sort(expPara$phiP)
sort(expPara$tau)
sort(expPara$gamma)
sort(expPara$zeroPoint)
modelName  = "RlearnL"
# create output directories
dir.create("figures/expParaAnalysis")
saveDir = sprintf("figures/expParaAnalysis/%s", modelName)
dir.create(saveDir)
# load blockdata data
load("genData/expDataAnalysis/blockData.RData")
# load expPara
paras = getParas(modelName)
nPara = length(paras)
parentDir = "genData/expModelFitting"
dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara= loadExpPara(paras, dirName)
useID = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
sort(expPara$phi)
sort(expPara$phiP)
sort(expPara$tau)
sort(expPara$zeroPoint)
sort(expPara$beta)
sort(expPara$betaP)
getwd()
modelName = "RlearnL"
#load libraries
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');
library("stringr")
library("loo")
library("coda")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getParas
load("wtwSettings.RData")
source("subFxs/analysisFxs.R")
#  set the environment for Rstan
library('rstan')
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# compile the stan model
model = stan_model(file = sprintf("stanModels/%s.stan", paste(modelName, "db", sep = "")))
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
originalFile = sprintf("genData/expModelFitting/%s", modelName)
dbFile = sprintf("genData/expModelFitting/%sdb", modelName)
if(!file.exists(dbFile)){
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
if(nFile == nSub * 3){
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
}else{
print("Wrong number of files in the original folder!")
break
}
}
# determine paras
paras = getParas(modelName)
nPara = length(paras)
if(paras == "wrong model name"){
print(paras)
break
}
# enter the refit stage
nLoop = 1
expPara = loadExpPara(paras,
sprintf("genData/expModelFitting/%sdb", modelName))
useID = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
excID = ids[!ids %in% useID]
excOD
excID
# loop over excID
n = length(excID)
if(n > 0){
text = sprintf("Start to refit %d participants", length(excID))
print(text)
foreach(i = 1 : n) %dopar% {
thisID = excID[[i]]
text = sprintf("refit s%d", thisID)
print(text)
# update nFits and converge
fitFile = sprintf("genData/expModelFitting/%sdb/afit_s%d.RData", modelName, thisID)
if(file.exists(fitFile)){
load(fitFile); nFit = nFit  + 1; save(nFit, file = fitFile)
}else{
nFit = 2; save(nFit, file = fitFile)
}
# prepare
thisTrialData = trialData[[thisID]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# determine fileName
fileName = sprintf("genData/expModelFitting/%sdb/s%s", modelName, thisID)
# refit
# load upper and lower
tempt = read.csv(sprintf("genData/expModelFitting/%sdb/s%s_summary.txt", modelName, thisID),
header = F)
low= tempt[1:nPara,4]
up = tempt[1 : nPara,8]
converge = modelFittingdb(thisTrialData, fileName, paras, model, modelName, nPara, low, up)
}# loop over participants
nLoop = nLoop + 1
}else{
break
}
}
converge
converge
converge
# evaluate useID again
expPara = loadExpPara(paras,
sprintf("genData/expModelFitting/%sdb", modelName))
useID = getUseID(expPara, paras)
print(length(useID))
# determine excID
expPara = loadExpPara(paras,
sprintf("genData/expModelFitting/%sdb", modelName))
useID = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
excID = ids[!ids %in% useID]
excID
expPara = loadExpPara(paras,
sprintf("genData/expModelFitting/%sdb", modelName))
useID = getUseID(expPara, paras)
print(length(useID))
nFit
load("/Users/cdlab_admin/Documents/first_kick/wtw_timing/genData/expModelFitting/RlearnLdb/afit_s37.RData")
nFit
nFit = nFit - 1
save(nFit, file = fitFile)
modelName
thisID
thisID = 37
fitFile = sprintf("genData/expModelFitting/%sdb/afit_s%d.RData", modelName, thisID)
save(nFit, file = fitFile)
# libraries and scripts
library("stringr")
library("ggplot2")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
source("subFxs/modelComparisonFxs.R")
source("subFxs/plotThemes.R")
# load model names
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
load("genData/expDataAnalysis/blockData.RData")
# select common useID
idList = hdrData$ID
modelNames = c("PRbs", "PRbsNC", "Rlearn", "RlearnL", "reduce_gamma")
nModel = length(modelNames)
useID_ = vector(mode = "list", length = nModel)
source("subFxs/loadFxs.R")
for(i in 1 : nModel){
modelName = modelNames[i]
paras = getParas(modelName)
expPara = loadExpPara(paras, sprintf("genData/expModelFitting/%sdb", modelName))
useID_[[i]] = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
}
useID = idList[apply(sapply(1 : nModel, function(i )idList %in% useID_[[i]]), MARGIN = 1,
all)]
nUse = length(useID)
# extract logEvidece_ from loo
logEvidence_ = matrix(NA, nUse, nModel)
logLik_ = matrix(NA, nUse, nModel)
pWaic_ = matrix(NA, nUse, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
for(sIdx in 1 : nUse ){
id = useID[sIdx]
fileName = sprintf("genData/expModelFitting/%sdb/s%s_waic.RData", modelName, id)
load(fileName)
logEvidence_[sIdx, m] = WAIC$elpd_waic # here is like loglikelyhood, larger the better
logLik_[sIdx, m] = WAIC$elpd_waic  + WAIC$p_waic / 2
pWaic_[sIdx, m] = WAIC$p_waic
}
}
# save output for modelComparision
output = data.frame(logEvidence_)
f= "genData/expModelFitting/logEvidenceList.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
# participants best desribed by
library("ggpubr")
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Participants best described (n = %d)", nUse))+
myTheme
dir.create("genData/expModelComparison")
ggsave("genData/expModelComparison/loo_nBest.png", width = 5, height =3.5)
useID_
length(useID_[[1]])
length(useID_[[2]])
length(useID_[[3]])
length(useID_[[4]])
length(useID_[[5]])
modelName = "PRbs"
source('~/Documents/first_kick/wtw_timing/expModelFittingCVdb.R', echo=TRUE)
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library("stringr")
source('subFxs/modelFittingFxs.R') # for fitting each single participant
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R") # for getParas
load("wtwSettings.RData")
#  set the environment for Rstan
library('rstan')
options(warn=-1, message =-1) # run without this for one participant to chec everything
Sys.setenv(USE_CXX14=1) # needed in local computeres
rstan_options(auto_write = TRUE)
# loop over participants
library("doMC")
library("foreach")
# nCore = as.numeric(Sys.getenv("NSLOTS")) # needed for cluster
# if(is.na(nCore)) nCore = 1 # needed for cluster
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# parameters
nFold = 10
# load expData
# one sub's data, two conditions together, are in one element in trialData
# hdrData only has 42 entries
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
nSub = nrow(hdrData)
idsCV = 1 : (nSub * nFold) # id encoded in cvPara
ids = hdrData$ID# id encoded in trialData
# initialize outputs
# for a specific model
# detect the debug folder
originalFile = sprintf("genData/expModelFittingCV/%s", modelName)
dbFile = sprintf("genData/expModelFittingCV/%sdb", modelName)
if(!file.exists(dbFile)){
dir.create(dbFile)
allFiles = list.files(path = originalFile)
nFile = length(allFiles)
if(nFile == length(idsCV)){
lapply(1 : nFile, function(i) file.copy(sprintf("%s/%s", originalFile, allFiles[i]),
sprintf("%s/%s", dbFile, allFiles[i])))
print("creat the debug folder")
}else{
print("Wrong number of files in the original folder!")
break
}
}
# loop over models
paras = getParas(modelName)
nPara = length(paras)
# load cvPara
# enter the refit stage
nLoop = 1
while(nLoop < 5){
cvPara = loadCVPara(paras, sprintf("genData/expModelFittingCV/%sdb", modelName),
"*_summary.txt")
useID = getUseID(cvPara, paras)
excID = idsCV[!idsCV %in% useID]
# refit the mode
if(length(excID) > 0){
text = sprintf("Start to refit %d participants", length(excID))
print(text)
# compile the debug version of the model
model = stan_model(file = sprintf("stanModels/%sdb.stan", modelName))
foreach(i = 1 : length(excID)) %dopar% {
# extract sIdx and fIdx from the id encoded in cvPara
sIdx = ceiling(excID[i] / nFold)  # ceiling groups 1-10 together yet floor + 1 groups 0-9 together
fIdx = excID[i] - (sIdx-1) * nFold
text = sprintf("reFit s%d_f%d", ids[sIdx], fIdx)
print(text)
# update nFits and converge
fitFile = sprintf("genData/expModelFittingCV/%sdb/afit_s%d_f%d.RData", modelName, ids[sIdx], fIdx)
if(file.exists(fitFile)){
load(fitFile)
nFit = nFit  + 1
save(nFit, file = fitFile)
}else{
nFit = 2
save(nFit, file = fitFile)
}
# prepare data
thisTrialData = trialData[[ids[sIdx]]]
# excluded some trials
excluedTrialsHP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[1]) &
thisTrialData$condition == "HP")
excluedTrialsLP = which(thisTrialData$trialStartTime > (blockSecs - tMaxs[2]) &
thisTrialData$condition == "LP")
excluedTrials = c(excluedTrialsHP, excluedTrialsLP)
thisTrialData = thisTrialData[!(1 : nrow(thisTrialData)) %in% excluedTrials,]
# select the training set
load(sprintf("genData/expModelFittingCV/split/s%d.RData", ids[sIdx]))
select = as.vector(partTable[-fIdx,])
thisTrialData = thisTrialData[(1 : nrow(thisTrialData)) %in% select,]
fileName = sprintf("genData/expModelFittingCV/%sdb/s%d_f%d", modelName,
ids[sIdx], fIdx)
# refit
# load upper and lower
tempt = read.csv(sprintf("genData/expModelFittingCV/%sdb/s%d_f%d_summary.txt", modelName,
ids[sIdx], fIdx),header = F)
low= tempt[1:nPara,4]
up = tempt[1 : nPara,8]
converge = modelFittingCVdb(thisTrialData, fileName, paras, model, modelName, nPara, low, up)
}# loop over participants
nLoop = nLoop + 1
}else{
break
}
}
