saveDir = sprintf("figures/expParaAnalysis/%s", modelName)
dir.create(saveDir)
# load blockdata data
load("genData/expDataAnalysis/blockData.RData")
# load expPara
paras = getParas(modelName)
nPara = length(paras)
parentDir = "genData/expModelFitting"
dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara= loadExpPara(paras, dirName)
useID = factor(getUseID(tempt, paras), levels = levels(hdrData$ID))
# plot hist
# paraNames = c("LR", "LP", expression(tau), expression(gamma), "P")
# paraNames = c("LR", "LP", expression(tau), "P")
paraNames = paras
expPara$condition = blockData$condition[blockData$id %in% expPara$id]
expPara %>% filter(id %in% useID) %>% select(c(paras)) %>%
gather(key = "para", value = "value") %>%
mutate(para = factor(para, levels = paras, labels = paraNames ))%>%
ggplot(aes(value)) + geom_histogram(bins = 8) +
facet_grid(~ para, scales = "free", labeller = label_parsed) +
myTheme + xlab(" ") + ylab(" ")
fileName = sprintf("%s/%s/hist.pdf", "figures/expParaAnalysis", modelName)
ggsave(fileName, width = 8, height = 3)
sort(expPara$gamma)
modelName = "Rlearn"
# create output directories
dir.create("figures/expParaAnalysis")
saveDir = sprintf("figures/expParaAnalysis/%s", modelName)
dir.create(saveDir)
# load blockdata data
load("genData/expDataAnalysis/blockData.RData")
# load expPara
paras = getParas(modelName)
nPara = length(paras)
parentDir = "genData/expModelFitting"
dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara= loadExpPara(paras, dirName)
useID = factor(getUseID(tempt, paras), levels = levels(hdrData$ID))
# plot hist
# paraNames = c("LR", "LP", expression(tau), expression(gamma), "P")
# paraNames = c("LR", "LP", expression(tau), "P")
paraNames = paras
expPara$condition = blockData$condition[blockData$id %in% expPara$id]
expPara %>% filter(id %in% useID) %>% select(c(paras)) %>%
gather(key = "para", value = "value") %>%
mutate(para = factor(para, levels = paras, labels = paraNames ))%>%
ggplot(aes(value)) + geom_histogram(bins = 8) +
facet_grid(~ para, scales = "free", labeller = label_parsed) +
myTheme + xlab(" ") + ylab(" ")
fileName = sprintf("%s/%s/hist.pdf", "figures/expParaAnalysis", modelName)
ggsave(fileName, width = 8, height = 3)
modelName = "RlearnL"
# create output directories
dir.create("figures/expParaAnalysis")
saveDir = sprintf("figures/expParaAnalysis/%s", modelName)
dir.create(saveDir)
# load blockdata data
load("genData/expDataAnalysis/blockData.RData")
# load expPara
paras = getParas(modelName)
nPara = length(paras)
parentDir = "genData/expModelFitting"
dirName = sprintf("%s/%sdb",parentDir, modelName)
expPara= loadExpPara(paras, dirName)
useID = factor(getUseID(tempt, paras), levels = levels(hdrData$ID))
# plot hist
# paraNames = c("LR", "LP", expression(tau), expression(gamma), "P")
# paraNames = c("LR", "LP", expression(tau), "P")
paraNames = paras
expPara$condition = blockData$condition[blockData$id %in% expPara$id]
expPara %>% filter(id %in% useID) %>% select(c(paras)) %>%
gather(key = "para", value = "value") %>%
mutate(para = factor(para, levels = paras, labels = paraNames ))%>%
ggplot(aes(value)) + geom_histogram(bins = 8) +
facet_grid(~ para, scales = "free", labeller = label_parsed) +
myTheme + xlab(" ") + ylab(" ")
fileName = sprintf("%s/%s/hist.pdf", "figures/expParaAnalysis", modelName)
ggsave(fileName, width = 8, height = 3)
# libraries and scripts
library("stringr")
library("ggplot2")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
source("subFxs/modelComparisonFxs.R")
source("subFxs/plotThemes.R")
# load model names
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
load("genData/expDataAnalysis/blockData.RData")
# select common useID
idList = hdrData$ID
modelNames = c("PRbs", "PRbsNC", "Rlearn", "RlearnL", "reduce_gamma")
nModel = length(modelNames)
useID_ = vector(mode = "list", length = nModel)
source("subFxs/loadFxs.R")
for(i in 1 : nModel){
modelName = modelNames[i]
paras = getParas(modelName)
expPara = loadExpPara(paras, sprintf("genData/expModelFitting/%sdb", modelName))
useID_[[i]] = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
}
useID = idList[apply(sapply(1 : nModel, function(i )idList %in% useID_[[i]]), MARGIN = 1,
all)]
nUse = length(useID)
# extract logEvidece_ from loo
logEvidence_ = matrix(NA, nUse, nModel)
logLik_ = matrix(NA, nUse, nModel)
pWaic_ = matrix(NA, nUse, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
for(sIdx in 1 : nUse ){
id = useID[sIdx]
fileName = sprintf("genData/expModelFitting/%sdb/s%s_waic.RData", modelName, id)
load(fileName)
logEvidence_[sIdx, m] = WAIC$elpd_waic # here is like loglikelyhood, larger the better
logLik_[sIdx, m] = WAIC$elpd_waic  + WAIC$p_waic / 2
pWaic_[sIdx, m] = WAIC$p_waic
}
}
# save output for modelComparision
output = data.frame(logEvidence_)
f= "genData/expModelFitting/logEvidenceList.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
# participants best desribed by
library("ggpubr")
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Participants best described (n = %d)", nUse))+
myTheme
dir.create("genData/expModelComparison")
ggsave("genData/expModelComparsion/loo_nBest.png", width = 5, height =3.5)
dir.create("genData/expModelComparison")
ggsave("genData/expModelComparson/loo_nBest.png", width = 5, height =3.5)
library("ggpubr")
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Participants best described (n = %d)", nUse))+
myTheme
dir.create("genData/expModelComparison")
ggsave("genData/expModelComparson/loo_nBest.png", width = 5, height =3.5)
ggsave("genData/expModelComparison/loo_nBest.png", width = 5, height =3.5)
rstan:::rstudio_stanc("~/Documents/first_kick/wtw_SDG_brandNew/stanModels/PRbs2.stan")
# be careful to always to use id in code, instead of expTrialData
# determine if truncated
isTrun = T
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
source("subFxs/helpFxs.R") # getPars
source("subFxs/loadFxs.R") # load  expPara
source("subFxs/taskFxs.R") # drawSamples
source("subFxs/repetitionFxs.R") # getRepFunction
source("subFxs/analysisFxs.R") # kmsc, trialPlot
# load summaryData
nBlock = 2
nComb = 10
load("genData/expDataAnalysis/blockData.RData")
load("genData/expDataAnalysis/kmOnGridBlock.RData")
summaryData = blockData
# load trialData since we need scheduledWait
allData = loadAllData()
hdrData = allData$hdrData
expTrialData = allData$trialData
allIDs = hdrData$ID
# re-simulate data
modelName = "PRbs2"
dir.create("figures/expModelRepitation")
dir.create(sprintf("figures/expModelRepitation/%s",modelName))
thisRep = modelRepitation(modelName, summaryData, expTrialData, nComb) # set seeds indise
# initialize
expPara = thisRep$expPara
repTrialData = thisRep$repTrialData
paras = getParas(modelName)
useID = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
repNo = thisRep$repNo
nSub =(length(useID))
AUCRep_ = matrix(NA, nrow = nComb , ncol = nSub * nBlock)
stdWdRep_ = matrix(NA, nrow = nComb, ncol = nSub * nBlock)
kmOnGridRep_ = vector(mode = "list", length = nSub * nBlock)
plotKMSC = F
for(sIdx in 1 : nSub){
# prepare inputs
id = useID[[sIdx]]
nTrial = summaryData$nTrial[summaryData$id == id]
label = sprintf("sub%d", id)
kmOnGridMatrix = matrix(NA, nrow = length(kmGrid), ncol = nComb)
for(cIdx in 1 : nComb){
thisRepTrialData = repTrialData[[repNo[cIdx, which(thisRep$useID == id)]]]
for(bkIdx in 1 : 2){
noIdx = sIdx * 2 - 2 + bkIdx
startIdx = min(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
endIdx = max(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
kmscResults = kmsc(truncateTrials(thisRepTrialData, startIdx, endIdx), min(tMaxs), label ,plotKMSC, kmGrid)
AUCRep_[cIdx,noIdx] = kmscResults[['auc']]
stdWdRep_[cIdx, noIdx] = kmscResults$stdWd
kmOnGridMatrix[,cIdx] = kmscResults$kmOnGrid
}
}
kmOnGridRep_[[noIdx]] = kmOnGridMatrix
}
# compare emipirical and reproduced AUC
muAUCRep = apply(AUCRep_, MARGIN = 2, mean);stdAUCRep = apply(AUCRep_, MARGIN = 2, sd)
minAUCRep = muAUCRep - stdAUCRep;maxAUCRep = muAUCRep + stdAUCRep
muStdWdRep = apply(stdWdRep_, MARGIN = 2, mean);stdStdWdRep = apply(stdWdRep_, MARGIN = 2, sd)
minStdWdRep = muStdWdRep - stdStdWdRep;maxStdWdRep = muStdWdRep + stdStdWdRep
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWD = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(AUC, muAUCRep)) +  geom_errorbar(aes(ymin = minAUCRep, ymax = maxAUCRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 22)) + ylim(c(-2, 22)) +
ylab("Model-generated (s)") + xlab("Observed (s)") + ggtitle(sprintf("Average WTW, n = %d", length(useID))) +
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/AUC_AUCRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# I don't know
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# be careful to always to use id in code, instead of expTrialData
# determine if truncated
isTrun = T
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
source("subFxs/helpFxs.R") # getPars
source("subFxs/loadFxs.R") # load  expPara
source("subFxs/taskFxs.R") # drawSamples
source("subFxs/repetitionFxs.R") # getRepFunction
source("subFxs/analysisFxs.R") # kmsc, trialPlot
# load summaryData
nBlock = 2
nComb = 10
load("genData/expDataAnalysis/blockData.RData")
load("genData/expDataAnalysis/kmOnGridBlock.RData")
summaryData = blockData
# load trialData since we need scheduledWait
allData = loadAllData()
hdrData = allData$hdrData
expTrialData = allData$trialData
allIDs = hdrData$ID
# re-simulate data
modelName = "PRbs2"
dir.create("figures/expModelRepitation")
dir.create(sprintf("figures/expModelRepitation/%s",modelName))
thisRep = modelRepitation(modelName, summaryData, expTrialData, nComb) # set seeds indise
# initialize
expPara = thisRep$expPara
repTrialData = thisRep$repTrialData
paras = getParas(modelName)
useID = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
repNo = thisRep$repNo
nSub =(length(useID))
AUCRep_ = matrix(NA, nrow = nComb , ncol = nSub * nBlock)
stdWdRep_ = matrix(NA, nrow = nComb, ncol = nSub * nBlock)
kmOnGridRep_ = vector(mode = "list", length = nSub * nBlock)
plotKMSC = F
for(sIdx in 1 : nSub){
# prepare inputs
id = useID[[sIdx]]
nTrial = summaryData$nTrial[summaryData$id == id]
label = sprintf("sub%d", id)
kmOnGridMatrix = matrix(NA, nrow = length(kmGrid), ncol = nComb)
for(cIdx in 1 : nComb){
thisRepTrialData = repTrialData[[repNo[cIdx, which(thisRep$useID == id)]]]
for(bkIdx in 1 : 2){
noIdx = sIdx * 2 - 2 + bkIdx
startIdx = min(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
endIdx = max(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
kmscResults = kmsc(truncateTrials(thisRepTrialData, startIdx, endIdx), min(tMaxs), label ,plotKMSC, kmGrid)
AUCRep_[cIdx,noIdx] = kmscResults[['auc']]
stdWdRep_[cIdx, noIdx] = kmscResults$stdWd
kmOnGridMatrix[,cIdx] = kmscResults$kmOnGrid
}
}
kmOnGridRep_[[noIdx]] = kmOnGridMatrix
}
# compare emipirical and reproduced AUC
muAUCRep = apply(AUCRep_, MARGIN = 2, mean);stdAUCRep = apply(AUCRep_, MARGIN = 2, sd)
minAUCRep = muAUCRep - stdAUCRep;maxAUCRep = muAUCRep + stdAUCRep
muStdWdRep = apply(stdWdRep_, MARGIN = 2, mean);stdStdWdRep = apply(stdWdRep_, MARGIN = 2, sd)
minStdWdRep = muStdWdRep - stdStdWdRep;maxStdWdRep = muStdWdRep + stdStdWdRep
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWD = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(AUC, muAUCRep)) +  geom_errorbar(aes(ymin = minAUCRep, ymax = maxAUCRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 22)) + ylim(c(-2, 22)) +
ylab("Model-generated (s)") + xlab("Observed (s)") + ggtitle(sprintf("Average WTW, n = %d", length(useID))) +
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/AUC_AUCRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# I don't know
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep.png", modelName)
ggsave(filename = fileName,  width = 6, height = 4)
# be careful to always to use id in code, instead of expTrialData
# determine if truncated
isTrun = T
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
source("subFxs/helpFxs.R") # getPars
source("subFxs/loadFxs.R") # load  expPara
source("subFxs/taskFxs.R") # drawSamples
source("subFxs/repetitionFxs.R") # getRepFunction
source("subFxs/analysisFxs.R") # kmsc, trialPlot
# load summaryData
nBlock = 2
nComb = 10
load("genData/expDataAnalysis/blockData.RData")
load("genData/expDataAnalysis/kmOnGridBlock.RData")
summaryData = blockData
# load trialData since we need scheduledWait
allData = loadAllData()
hdrData = allData$hdrData
expTrialData = allData$trialData
allIDs = hdrData$ID
# re-simulate data
modelName = "PRbs2"
dir.create("figures/expModelRepitation")
dir.create(sprintf("figures/expModelRepitation/%s",modelName))
thisRep = modelRepitation(modelName, summaryData, expTrialData, nComb) # set seeds indise
thisRep = modelRepitation(modelName, summaryData, expTrialData, nComb) # set seeds indise
# re-simulate data
modelName = "PRbs"
dir.create("figures/expModelRepitation")
dir.create(sprintf("figures/expModelRepitation/%s",modelName))
thisRep = modelRepitation(modelName, summaryData, expTrialData, nComb) # set seeds indise
# initialize
expPara = thisRep$expPara
repTrialData = thisRep$repTrialData
paras = getParas(modelName)
useID = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
repNo = thisRep$repNo
nSub =(length(useID))
AUCRep_ = matrix(NA, nrow = nComb , ncol = nSub * nBlock)
stdWdRep_ = matrix(NA, nrow = nComb, ncol = nSub * nBlock)
kmOnGridRep_ = vector(mode = "list", length = nSub * nBlock)
plotKMSC = F
for(sIdx in 1 : nSub){
# prepare inputs
id = useID[[sIdx]]
nTrial = summaryData$nTrial[summaryData$id == id]
label = sprintf("sub%d", id)
kmOnGridMatrix = matrix(NA, nrow = length(kmGrid), ncol = nComb)
for(cIdx in 1 : nComb){
thisRepTrialData = repTrialData[[repNo[cIdx, which(thisRep$useID == id)]]]
for(bkIdx in 1 : 2){
noIdx = sIdx * 2 - 2 + bkIdx
startIdx = min(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
endIdx = max(which(thisRepTrialData$cond == conditions[3 - bkIdx]))
kmscResults = kmsc(truncateTrials(thisRepTrialData, startIdx, endIdx), min(tMaxs), label ,plotKMSC, kmGrid)
AUCRep_[cIdx,noIdx] = kmscResults[['auc']]
stdWdRep_[cIdx, noIdx] = kmscResults$stdWd
kmOnGridMatrix[,cIdx] = kmscResults$kmOnGrid
}
}
kmOnGridRep_[[noIdx]] = kmOnGridMatrix
}
# compare emipirical and reproduced AUC
muAUCRep = apply(AUCRep_, MARGIN = 2, mean);stdAUCRep = apply(AUCRep_, MARGIN = 2, sd)
minAUCRep = muAUCRep - stdAUCRep;maxAUCRep = muAUCRep + stdAUCRep
muStdWdRep = apply(stdWdRep_, MARGIN = 2, mean);stdStdWdRep = apply(stdWdRep_, MARGIN = 2, sd)
minStdWdRep = muStdWdRep - stdStdWdRep;maxStdWdRep = muStdWdRep + stdStdWdRep
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWD = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(AUC, muAUCRep)) +  geom_errorbar(aes(ymin = minAUCRep, ymax = maxAUCRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 22)) + ylim(c(-2, 22)) +
ylab("Model-generated (s)") + xlab("Observed (s)") + ggtitle(sprintf("Average WTW, n = %d", length(useID))) +
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/AUC_AUCRep.png", modelName)
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep.png", modelName)
# libraries and scripts
library("stringr")
library("ggplot2")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
source("subFxs/modelComparisonFxs.R")
source("subFxs/plotThemes.R")
# load model names
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
load("genData/expDataAnalysis/blockData.RData")
# select common useID
idList = hdrData$ID
modelNames = c("PRbs", "PRbsNC", "Rlearn", "RlearnL", "reduce_gamma")
nModel = length(modelNames)
useID_ = vector(mode = "list", length = nModel)
source("subFxs/loadFxs.R")
for(i in 1 : nModel){
modelName = modelNames[i]
paras = getParas(modelName)
expPara = loadExpPara(paras, sprintf("genData/expModelFitting/%sdb", modelName))
useID_[[i]] = factor(getUseID(expPara, paras), levels = levels(hdrData$ID))
}
useID = idList[apply(sapply(1 : nModel, function(i )idList %in% useID_[[i]]), MARGIN = 1,
all)]
nUse = length(useID)
# extract logEvidece_ from loo
logEvidence_ = matrix(NA, nUse, nModel)
logLik_ = matrix(NA, nUse, nModel)
pWaic_ = matrix(NA, nUse, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
for(sIdx in 1 : nUse ){
id = useID[sIdx]
fileName = sprintf("genData/expModelFitting/%sdb/s%s_waic.RData", modelName, id)
load(fileName)
logEvidence_[sIdx, m] = WAIC$elpd_waic # here is like loglikelyhood, larger the better
logLik_[sIdx, m] = WAIC$elpd_waic  + WAIC$p_waic / 2
pWaic_[sIdx, m] = WAIC$p_waic
}
}
# save output for modelComparision
output = data.frame(logEvidence_)
f= "genData/expModelFitting/logEvidenceList.csv"
write.table(file = f, output, sep = ",", col.names = F, row.names = F)
library("ggpubr")
bestNums = sapply(1 : nModel, function(i) sum(apply(logEvidence_[,1:nModel], MARGIN = 1, FUN = function(x) which.max(x) == i)))
data.frame(model = modelNames, bestNums = bestNums) %>%  ggplot(aes(x="", y=bestNums, fill=model)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + ylab("") + xlab("") + ggtitle(sprintf("Participants best described (n = %d)", nUse))+
myTheme
dir.create("genData/expModelComparison")
data.frame(muAUCRep, minAUCRep, maxAUCRep,muStdWdRep, minStdWdRep, maxStdWdRep,
AUC = summaryData$AUC[summaryData$id %in% useID], stdWd = summaryData$stdWd[summaryData$id %in% useID],
condition = summaryData$condition[summaryData$id %in% useID]) %>%
ggplot(aes(stdWd, muStdWdRep)) + geom_point() + geom_errorbar(aes(ymin = minStdWdRep, ymax = maxStdWdRep), color = "grey") +
geom_point(size = 2) + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme  +
ylab(expression(bold(paste("Model-generated (s"^2,")")))) +
xlab(expression(bold(paste("Observed (s"^2,")")))) +ggtitle(sprintf("Std WTW, n = %d", length(useID)))+
myThemeBig + theme(plot.title = element_text(face = "bold", hjust = 0.5))
fileName = sprintf("figures/expModelRepitation/%s/std_stdRep.png", modelName)
# be careful to always to use id in code, instead of expTrialData
# determine if truncated
isTrun = T
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
load("wtwSettings.RData")
source("subFxs/helpFxs.R") # getPars
source("subFxs/loadFxs.R") # load  expPara
source("subFxs/taskFxs.R") # drawSamples
source("subFxs/repetitionFxs.R") # getRepFunction
source("subFxs/analysisFxs.R") # kmsc, trialPlot
# load summaryData
nBlock = 2
nComb = 10
load("genData/expDataAnalysis/blockData.RData")
load("genData/expDataAnalysis/kmOnGridBlock.RData")
summaryData = blockData
# load trialData since we need scheduledWait
allData = loadAllData()
hdrData = allData$hdrData
expTrialData = allData$trialData
allIDs = hdrData$ID
# re-simulate data
modelName = "PRbs"
dir.create("figures/expModelRepitation")
dir.create(sprintf("figures/expModelRepitation/%s",modelName))
thisRep = modelRepitation(modelName, summaryData, expTrialData, nComb) # set seeds indise
initialize
expPara = thisRep$expPara
repTrialData = thisRep$repTrialData
paras = getParas(modelName)
hist(expPara$gamma)
sort(expPara$gamma)
