wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
foreach(i = 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
foreach(i = 1 : nSim) %dopar% {
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP, MARGIN = 1, mean),
wtwLP = apply(wtwLP, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP, MARGIN = 1, sd))
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
View(outputs)
paras
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
kmscResults$auc
cb = c("LP", "HP")
cb
drawSample
paras = medianParas
wtwLP_
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwtsResults$timeWTW
length(wtwtsResults$timeWTW)
length(tGrid)
apply(wtwHP_, MARGIN = 1, mean)
View(wtwHP_)
foreach(i = 1 : nSim) %dopar% {
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
View(wtwHP_)
aucHP_
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
View(outputs)
apply(wtwHP_, MARGIN = 1, mean)
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
View(outputs)
thisTrialData$scheduledWait
hist(thisTrialData$scheduledWait[thisTrialData$condition == "HP"])
hist(thisTrialData$scheduledWait[thisTrialData$condition == "HP"])
a = vector(length = 100)
seq = c();
for(i in 1:100){
junk = drawSample("unif16", seq)
a[i] = junk$delay
seq = junk$seq
}
seq
a
hist(a)
hist(seq)
a = trialData[[1]]
a$scheduledWait[a$condition == "HP"]
hist(a$scheduledWait[a$condition == "HP"])\
hist(a$scheduledWait[a$condition == "HP"])
hist(a$scheduledWait[a$condition == "HP"])
graphics.off()
hist(a$scheduledWait[a$condition == "HP"])
rm(list = ls())
graphics.off()
# in this dataset, only trials within the 7 mins will be kept. Therefore, we don't need to delete any data
# determine whether use truncated data
isTrun = T
# load libraries
source('subFxs/loadFxs.R') # for loading data
source('subFxs/analysisFxs.R') # for analysis
source("subFxs/plotThemes.R")
library("ggplot2")
library('dplyr')
dir.create("genData")
dir.create("genData/expDataAnalysis")
# load setting parameters
load("wtwSettings.RData")
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
a = trialData[[1]]
hist(a$scheduledWait[a$condition == "HP"])
hist(a$scheduledWait[a$condition == "HP"])
a = trialData[[2]]
hist(a$scheduledWait[a$condition == "HP"])
hist(a$scheduledWait[a$condition == "HP"], breaks = seq(2, 16, by = 2))
hist(a$scheduledWait[a$condition == "HP"], breaks = seq(0, 16, by = 2))
# this script is used to demonstrate the effect of
library('ggplot2')
library('plyr')
library('dplyr')
library('tidyr')
load("wtwSettings.RData")
source('subFxs/repetitionFxs.R') # called by simulate
source("subFxs/helpFxs.R") # getParas
source("subFxs/loadFxs.R") # load scheduledWait from empirical data
source("subFxs/analysisFxs.R")
source("subFxs/plotThemes.R")
# loop over participants
library("doMC")
library("foreach")
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
# load expPara
modelName = "RL2"
paraNames = getParaNames(modelName)
nPara = length(paraNames)
expPara = loadExpPara(paraNames, dirName = sprintf("genData/expModelFitting/%sdb", modelName))
useID = getUseID(expPara, paraNames)
if(length(useID) != nSub){
cat("The model doesn't converge completely!")
}
# determine paraSamples
nCut = 10
paraSamples = matrix(NA, nrow = nCut, ncol = nPara)
for(i in 1 : nPara){
junk = expPara[,paraNames[i]]
paraSamples[,i] = seq(min(junk), max(junk), length.out = nCut)
}
# median paras
medianParas = sapply(1 : nPara, function(i) median(expPara[,i]))
modelName = "RL2"
cb = c("LP", "HP")
# get simFun
simFun = getSimFun(modelName)
source("subFxs/simulationFxs.R")
# get simFun
simFun = getSimFun(modelName)
# initialize outputs
aucHP_ = vector(length = nSim)
nSim = 5
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
paras = medianParas
# get simFun
simFun = getSimFun(modelName)
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
x
source("subFxs/taskFxs.R")
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
mean(aucHP_)
aucLP_
aucHP_
a = thisTrialData[thisTrialData$condition == "HP",]
a$timeWaited
paras
cb = c("HP", "LP")
simulateUnit = function(paras, nSim, modelName, cb){
# get simFun
simFun = getSimFun(modelName)
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
return(outputs)
}
cb = c("HP", "LP")
# get simFun
simFun = getSimFun(modelName)
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
aucHP
aucHP_
aucLP_
# this script is used to demonstrate the effect of
library('ggplot2')
library('plyr')
library('dplyr')
library('tidyr')
load("wtwSettings.RData")
source('subFxs/repetitionFxs.R') # called by simulate
source("subFxs/helpFxs.R") # getParas
source("subFxs/loadFxs.R") # load scheduledWait from empirical data
source("subFxs/analysisFxs.R")
source("subFxs/plotThemes.R")
source("subFxs/simulationFxs.R")
source("subFxs/taskFxs.R")
# loop over participants
library("doMC")
library("foreach")
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
# load expPara
modelName = "RL2"
paraNames = getParaNames(modelName)
nPara = length(paraNames)
expPara = loadExpPara(paraNames, dirName = sprintf("genData/expModelFitting/%sdb", modelName))
useID = getUseID(expPara, paraNames)
if(length(useID) != nSub){
cat("The model doesn't converge completely!")
}
# determine paraSamples
nCut = 10
paraSamples = matrix(NA, nrow = nCut, ncol = nPara)
for(i in 1 : nPara){
junk = expPara[,paraNames[i]]
paraSamples[,i] = seq(min(junk), max(junk), length.out = nCut)
}
# median paras
medianParas = sapply(1 : nPara, function(i) median(expPara[,i]))
# simulate
# determine simFun
modelName = "RL2"
cb = c("LP", "HP")
nSim = 5
nCond = length(conditions)
# initialize
auc_ = array(NA, dim = c(nCut, nPara, nCond))
wtw_ = array(NA, dim = c(length(tGrid), nCut, nPara, nCond))
aucSD_ = array(NA, dim = c(nCut, nPara, nCond))
wtwSD_ = array(NA, dim = c(length(tGrid), nCut, nPara, nCond))
reRate_ = array(NA, dim = c(nCut, nPara))
for(pIdx in 1 : nPara){
for(cutIdx in 1 : nCut){
paras = medianParas
paras[pIdx] = paraSamples[cutIdx,pIdx]
tempt = simulateUnit(paras, nSim, modelName, cb)
auc_[cutIdx, pIdx, 1] = tempt$aucHP
auc_[cutIdx, pIdx, 2] = tempt$aucLP
aucSD_[cutIdx, pIdx, 1] = tempt$aucHPSD
aucSD_[cutIdx, pIdx, 2] = tempt$aucLPSD
wtw_[ , cutIdx, pIdx, 1] = tempt$wtwHP
wtw_[ , cutIdx, pIdx, 2] = tempt$wtwLP
wtwSD_[ , cutIdx, pIdx, 1] = tempt$wtwHPSD
wtwSD_[ , cutIdx, pIdx, 2] = tempt$wtwLPSD
reRate_[cutIdx, pIdx] = tempt$reRate
}
}
# reorganizd the data
junk = data.frame(rbind(wtw_[,,6,1], wtw_[,,6,2]))
str(junk)
dim(junk)
a = junk %>% as_tibble() %>%
gather(key = cut, value = wtw)
dim(a)
str(a)
junk = data.frame(rbind(wtw_[,,6,1], wtw_[,,6,2]))
names(junk) = 1:nCut
junk %>% as_tibble() %>%
gather(key = cut, value = wtw)
junk = data.frame(rbind(wtw_[,,6,1], wtw_[,,6,2]))
names(junk) = 1:nCut
junk %>% as_tibble() %>%
gather(key = cut, value = wtw) %>%
mutate(t = rep(1 : (length(tGrid) * 2), nCut)) %>%
ggplot(aes(t, wtw)) + geom_point()
# reorganizd the data
junk = data.frame(rbind(wtw_[,,6,1], wtw_[,,6,2]))
names(junk) = 1:nCut
junk %>% as_tibble() %>%
gather(key = cut, value = wtw) %>%
mutate(t = rep(1 : (length(tGrid) * 2), nCut)) %>%
ggplot(aes(t, wtw)) + geom_point() + facet_grid(~cut)
a = junk %>% as_tibble() %>%
gather(key = cut, value = wtw) %>%
mutate(t = rep(1 : (length(tGrid) * 2), nCut))
head(a)
a[a$cut == 1,] %>% ggplot(aes(t, wtw)) + geom_point()
a[a$cut == 2,] %>% ggplot(aes(t, wtw)) + geom_point()
a[a$cut == 3,] %>% ggplot(aes(t, wtw)) + geom_point()
junk = data.frame(rbind(wtw_[,,6,1], wtw_[,,6,2]))
names(junk) = 1:nCut
head(junk)
pIdx = 6
cutIdx = 1
paras = medianParas
paras[pIdx] = paraSamples[cutIdx,pIdx]
paras
paras
# get simFun
simFun = getSimFun(modelName)
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
reRate_ = vector(length = nSim)
i = 1
set.seed(i)
thisTrialData = simFun(paras, cb)
thisTrialData$Qwaits = NULL
thisTrialData = as.data.frame(thisTrialData)
trialPlots(thisTrialData, " ")
trialPlots(thisTrialData, " ")
paras
dim(paraSamples)
paras[6] = paraSamples[10,6]
paras
set.seed(i)
thisTrialData = simFun(paras, cb)
thisTrialData$Qwaits = NULL
thisTrialData = as.data.frame(thisTrialData)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
trialPlots(thisTrialData, label = " ")
thisTrialData = simFun(paras, cb)
thisTrialData$Qwaits = NULL
thisTrialData = as.data.frame(thisTrialData)
trialPlots(thisTrialData, label = " ")
r
thisTrialData = simFun(paras, cb)
plot(thisTrialData$Qwaits[,1])
plot(thisTrialData$Qwaits[,2])
plot(thisTrialData$Qwaits[,3])
plot(thisTrialData$Qwaits[,5])
plot(thisTrialData$Vitis[,1])
thisTrialData$Vitis[1]
thisTrialData$Vitis[2]
thisTrialData$Vitis[3]
thisTrialData$reRates
source('~/Documents/first_kick/wtw_timing/subFxs/simulationFxs.R')
