# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
# load expPara
modelName = "RL2"
paraNames = getParaNames(modelName)
nPara = length(paraNames)
expPara = loadExpPara(paraNames, dirName = sprintf("genData/expModelFitting/%sdb", modelName))
useID = getUseID(expPara, paraNames)
if(length(useID) != nSub){
cat("The model doesn't converge completely!")
}
# median paras
medianParas = sapply(1 : nPara, function(i) median(expPara[,i]))
# determine paraSamples
nCut = 10
medianParas
medianParas[1] / medianParas[2]
medianParas[1] / medianParas[5]
meanParas = sapply(1 : nPara, function(i) mean(expPara[,i]))
meanParas
0.02554456 / 0.01731460
0.02554456 / meanParas[5]
nSim = 10
modelName = "RL2"
cb = c("HP", "HP")
tempt = simulateUnit(meanParas, nSim, modelName, cb)
paras
meanParas
meanParas = meanParas[1:5]
meanParas[2] = meanParas[1] / meanParas[2]
cb = c("HP", "HP")
tempt = simulateUnit(meanParas, nSim, modelName, cb)
meanParas
meanParas = sapply(1 : nPara, function(i) mean(expPara[,i]))
meanParas = meanParas[1:5]
meanParas[2] = meanParas[2] / meanParas[1]
meanParas
nSim = 10
modelName = "RL2"
cb = c("HP", "HP")
tempt = simulateUnit(meanParas, nSim, modelName, cb)
simFun = getSimFun(modelName)
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
reRate_ = vector(length = nSim)
i = 1
set.seed(i)
thisTrialData = simFun(paras, cb)
thisTrialData$Qwaits = NULL
thisTrialData = as.data.frame(thisTrialData)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
set.seed(i)
thisTrialData = simFun(paras, cb)
paras = meanParas
thisTrialData = simFun(paras, cb)
thisTrialData$Qwaits = NULL
thisTrialData = as.data.frame(thisTrialData)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
nSim = 10
modelName = "RL2"
cb = c("HP", "LP")
tempt = simulateUnit(meanParas, nSim, modelName, cb)
tempt$aucHP
tempt$aucLP
medianParas
tempt = simulateUnit(medianParas, nSim, modelName, cb)
tempt$aucHP
tempt$aucLP
cb = c("LP", "HP")
tempt = simulateUnit(meanParas, nSim, modelName, cb)
tempt = simulateUnit(medianParas, nSim, modelName, cb)
tempt$aucLP
tempt$aucHP
tempt = simulateUnit(meanParas, nSim, modelName, cb)
tempt$aucHP
tempt$aucLP
tempt = simulateUnit(medianParas, nSim, modelName, cb)
tempt$aucHP
tempt$aucLP
cb = c("LP", "HP")
tempt = simulateUnit(meanParas, nSim, modelName, cb)
tempt$reRate
tempt$aucHP
tempt$aucLP
cb = c("HP", "LP")
tempt = simulateUnit(meanParas, nSim, modelName, cb)
tempt$reRate
tempt$aucHP
tempt$aucLP
nCut = 10
paraSamples = matrix(NA, nrow = nCut, ncol = (nPara-1))
for(i in 1 : (nPara - 1)){
junk = expPara[,paraNames[i]]
paraSamples[,i] = seq(min(junk), max(junk), length.out = nCut)
}
paraSamples
meanParas
i = 1
expPara[,paraNames[i]]
(min(junk) + max(junk) / 2)
(min(junk) + max(junk)) / 2
meanParas
i = 1
meanParas[i] + (-2 : 2) * sd(expPara[,i])
# determine paraSamples
nCut = 7
paraSamples = matrix(NA, nrow = nCut, ncol = (nPara-1))
for(i in 1 : (nPara - 1)){
junk = expPara[,paraNames[i]]
rg = range(junk)
paraSamples[,i] = seq(min(junk) + rg*0.2, max(junk)-rg*0.2, length.out = nCut)
}
min(junk) + rg*0.2
for(i in 1 : (nPara - 1)){
junk = expPara[,paraNames[i]]
rg = diff(range(junk))
paraSamples[,i] = seq(min(junk) + rg*0.2, max(junk)-rg*0.2, length.out = nCut)
}
paraSamples
for(i in 1 : (nPara - 1)){
junk = expPara[,paraNames[i]]
rg = diff(range(junk))
paraSamples[,i] = seq(min(junk) + rg*0.2, max(junk)-rg*0.2, length.out = nCut)
if(i == 2){
junk = expPara[,paraNames[2]] / expPara[,paraNames[1]]
rg = diff(range(junk))
paraSamples[,i] = seq(min(junk) + rg*0.2, max(junk)-rg*0.2, length.out = nCut)
}
}
paraSamples
paraNames
expPara[,paraNames[2]] / expPara[,paraNames[1]]
junk = expPara[,paraNames[2]] / expPara[,paraNames[1]]
range(junk)
quantile(junk, seq(0.2, 0.8, by = 0.1))
junk = ifelse(i == 2, expPara[,2] / expPara[,1], expPara[,i])
junk = ifelse(i == 2, expPara[,2] / expPara[,1], expPara[,i])
qt2 = quantile(junk, 0.2)
qt8 = quantile(junk, 0.2)
qt2
at28
nCut = 7
paraSamples = matrix(NA, nrow = nCut, ncol = (nPara-1))
for(i in 1 : (nPara - 1)){
junk = ifelse(i == 2, expPara[,2] / expPara[,1], expPara[,i])
qt2 = quantile(junk, 0.2)
qt8 = quantile(junk, 0.2)
paraSamples[,i] = seq(qt2, qt8, length.out = nCut)
}
paraSamples
for(i in 1 : (nPara - 1)){
junk = ifelse(i == 2, expPara[,2] / expPara[,1], expPara[,i])
qt2 = quantile(junk, 0.2)
qt8 = quantile(junk, 0.8)
paraSamples[,i] = seq(qt2, qt8, length.out = nCut)
}
paraSamples
quantile(junk, 0.8)
quantile(junk, 0.2)
for(i in 1 : (nPara - 1)){
if(i == 2){
junk = expPara[,2] / expPara[,1]
}else{
junk = expPara[,i])
}
qt2 = quantile(junk, 0.2)
qt8 = quantile(junk, 0.8)
paraSamples[,i] = seq(qt2, qt8, length.out = nCut)
}
for(i in 1 : (nPara - 1)){
if(i == 2){
junk = expPara[,2] / expPara[,1]
}else{
junk = expPara[,i]
}
qt2 = quantile(junk, 0.2)
qt8 = quantile(junk, 0.8)
paraSamples[,i] = seq(qt2, qt8, length.out = nCut)
}
junk
paraSamples
meanParas
# initialize
auc_ = array(NA, dim = c(nCut, nPara - 1, nCond))
wtw_ = array(NA, dim = c(length(tGrid), nCut, nPara - 1, nCond))
aucSD_ = array(NA, dim = c(nCut, nPara - 1, nCond))
wtwSD_ = array(NA, dim = c(length(tGrid), nCut, nPara - 1, nCond))
# simulate
# determine simFun
modelName = "RL2"
cb = c("HP", "LP")
nSim = 5
nCond = length(conditions)
# initialize
auc_ = array(NA, dim = c(nCut, nPara - 1, nCond))
wtw_ = array(NA, dim = c(length(tGrid), nCut, nPara - 1, nCond))
aucSD_ = array(NA, dim = c(nCut, nPara - 1, nCond))
wtwSD_ = array(NA, dim = c(length(tGrid), nCut, nPara - 1, nCond))
reRate_ = array(NA, dim = c(nCut, nPara - 1))
for(pIdx in 1 : (nPara-1)){
for(cutIdx in 1 : nCut){
paras = meanParas
paras[pIdx] = paraSamples[cutIdx,pIdx]
tempt = simulateUnit(paras, nSim, modelName, cb)
auc_[cutIdx, pIdx, 1] = tempt$aucHP
auc_[cutIdx, pIdx, 2] = tempt$aucLP
aucSD_[cutIdx, pIdx, 1] = tempt$aucHPSD
aucSD_[cutIdx, pIdx, 2] = tempt$aucLPSD
wtw_[ , cutIdx, pIdx, 1] = tempt$wtwHP
wtw_[ , cutIdx, pIdx, 2] = tempt$wtwLP
wtwSD_[ , cutIdx, pIdx, 1] = tempt$wtwHPSD
wtwSD_[ , cutIdx, pIdx, 2] = tempt$wtwLPSD
reRate_[cutIdx, pIdx] = tempt$reRate
}
}
# reorganizd the data
junk = data.frame(rbind(auc_[,,1], auc_[,,2]))
names(junk) = paraNames
junk %>% as_tibble() %>%
mutate("condition" = rep(conditions, each = nCut),
"percentile" = rep(1:nCut, 2)) %>%
gather(key = para, value = auc, -condition, -percentile) %>%
mutate(para = factor(para, levels = paraNames)) %>%
ggplot(aes(percentile, auc)) + geom_point() + facet_grid(condition~para)
# reorganizd the data
junk = data.frame(rbind(auc_[,,1], auc_[,,2]))
names(junk) = paraNames[1:5]
junk %>% as_tibble() %>%
mutate("condition" = rep(conditions, each = nCut),
"percentile" = rep(1:nCut, 2)) %>%
gather(key = para, value = auc, -condition, -percentile) %>%
mutate(para = factor(para, levels = paraNames)) %>%
ggplot(aes(percentile, auc)) + geom_point() + facet_grid(condition~para)
paraSamples
p1 = 1
p2 = 2
auc_ = array(NA, dim = c(nCut, nCut, nCond))
wtw_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
aucSD_ = array(NA, dim = c(nCut, nCut1, nCond))
wtwSD_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
reRate_ = array(NA, dim = c(nCut, nCut))
for(c1 in 1 : nCut){
for(c2 in 1 : nCut){
paras = meanParas
paras[p1] = paraSamples[cut1, p1]
paras[p2] = paraSamples[cut2, p2]
tempt = simulateUnit(paras, nSim, modelName, cb)
auc_[c1, c2, 1] = tempt$aucHP
auc_[c1, c2, 2] = tempt$aucLP
aucSD_[c1, c2, 1] = tempt$aucHPSD
aucSD_[c1, c2, 2] = tempt$aucLPSD
wtw_[ , c1, c2, 1] = tempt$wtwHP
wtw_[ , c1, c2, 2] = tempt$wtwLP
wtwSD_[ , c1, c2, 1] = tempt$wtwHPSD
wtwSD_[ , c1, c2, 2] = tempt$wtwLPSD
reRate_[c1, c2] = tempt$reRate
}
}
auc_ = array(NA, dim = c(nCut, nCut, nCond))
wtw_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
aucSD_ = array(NA, dim = c(nCut, nCut1, nCond))
wtwSD_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
reRate_ = array(NA, dim = c(nCut, nCut))
auc_ = array(NA, dim = c(nCut, nCut, nCond))
wtw_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
aucSD_ = array(NA, dim = c(nCut, nCut, nCond))
wtwSD_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
reRate_ = array(NA, dim = c(nCut, nCut))
for(c1 in 1 : nCut){
for(c2 in 1 : nCut){
paras = meanParas
paras[p1] = paraSamples[c1, p1]
paras[p2] = paraSamples[c2, p2]
tempt = simulateUnit(paras, nSim, modelName, cb)
auc_[c1, c2, 1] = tempt$aucHP
auc_[c1, c2, 2] = tempt$aucLP
aucSD_[c1, c2, 1] = tempt$aucHPSD
aucSD_[c1, c2, 2] = tempt$aucLPSD
wtw_[ , c1, c2, 1] = tempt$wtwHP
wtw_[ , c1, c2, 2] = tempt$wtwLP
wtwSD_[ , c1, c2, 1] = tempt$wtwHPSD
wtwSD_[ , c1, c2, 2] = tempt$wtwLPSD
reRate_[c1, c2] = tempt$reRate
}
}
junk = data.frame(rbind(auc_[,,1], auc_[,,2]))
names(junk) = 1:10
junk %>% as_tibble() %>%
mutate("condition" = rep(conditions, each = nCut),
"p2" = rep(1:nCut, 2)) %>%
gather(key = p1, value = auc, -condition, -p2) %>%
ggplot(aes(p1, auc, color = p2)) + geom_point() + facet_grid(~condition)
junk = data.frame(rbind(auc_[,,1], auc_[,,2]))
dim(junk)
names(junk) = 1:nCut
junk %>% as_tibble() %>%
mutate("condition" = rep(conditions, each = nCut),
"p2" = rep(1:nCut, 2)) %>%
gather(key = p1, value = auc, -condition, -p2) %>%
ggplot(aes(p1, auc, color = p2)) + geom_point() + facet_grid(~condition)
cb
junk %>% as_tibble() %>%
mutate("condition" = rep(conditions, each = nCut),
"p2" = rep(1:nCut, 2)) %>%
mutate(p2 = as.factor(p2), p1 = as.factor(p1)) %>%
gather(key = p1, value = auc, -condition, -p2) %>%
ggplot(aes(p1, auc, color = p2)) + geom_point() + facet_grid(~condition)
junk %>% as_tibble() %>%
mutate("condition" = rep(conditions, each = nCut),
"p2" = rep(1:nCut, 2)) %>%
mutate(p2 = as.factor(p2)) %>%
gather(key = p1, value = auc, -condition, -p2) %>%
ggplot(aes(p1, auc, color = p2)) + geom_point() + facet_grid(~condition)
meanParas
auc_ = array(NA, dim = c(nCut, nCut, nCond))
wtw_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
aucSD_ = array(NA, dim = c(nCut, nCut, nCond))
wtwSD_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
reRate_ = array(NA, dim = c(nCut, nCut))
for(c1 in 1 : nCut){
for(c2 in 1 : nCut){
paras = meanParas
meanParas[4] = 10
paras[p1] = paraSamples[c1, p1]
paras[p2] = paraSamples[c2, p2]
tempt = simulateUnit(paras, nSim, modelName, cb)
auc_[c1, c2, 1] = tempt$aucHP
auc_[c1, c2, 2] = tempt$aucLP
aucSD_[c1, c2, 1] = tempt$aucHPSD
aucSD_[c1, c2, 2] = tempt$aucLPSD
wtw_[ , c1, c2, 1] = tempt$wtwHP
wtw_[ , c1, c2, 2] = tempt$wtwLP
wtwSD_[ , c1, c2, 1] = tempt$wtwHPSD
wtwSD_[ , c1, c2, 2] = tempt$wtwLPSD
reRate_[c1, c2] = tempt$reRate
}
}
junk = data.frame(rbind(auc_[,,1], auc_[,,2]))
names(junk) = 1:nCut
junk %>% as_tibble() %>%
mutate("condition" = rep(conditions, each = nCut),
"p2" = rep(1:nCut, 2)) %>%
mutate(p2 = as.factor(p2)) %>%
gather(key = p1, value = auc, -condition, -p2) %>%
ggplot(aes(p1, auc, color = p2)) + geom_point() + facet_grid(~condition)
cb
paraSamples
# interactions between paras
for(p1 in 1 : (nPara - 1)){
for(p2 in (p1 + 2) : (nPara - 1)){
auc_ = array(NA, dim = c(nCut, nCut, nCond))
wtw_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
aucSD_ = array(NA, dim = c(nCut, nCut, nCond))
wtwSD_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
reRate_ = array(NA, dim = c(nCut, nCut))
for(c1 in 1 : nCut){
for(c2 in 1 : nCut){
paras = meanParas
meanParas[4] = 12
paras[p1] = paraSamples[c1, p1]
paras[p2] = paraSamples[c2, p2]
tempt = simulateUnit(paras, nSim, modelName, cb)
auc_[c1, c2, 1] = tempt$aucHP
auc_[c1, c2, 2] = tempt$aucLP
aucSD_[c1, c2, 1] = tempt$aucHPSD
aucSD_[c1, c2, 2] = tempt$aucLPSD
wtw_[ , c1, c2, 1] = tempt$wtwHP
wtw_[ , c1, c2, 2] = tempt$wtwLP
wtwSD_[ , c1, c2, 1] = tempt$wtwHPSD
wtwSD_[ , c1, c2, 2] = tempt$wtwLPSD
reRate_[c1, c2] = tempt$reRate
}
}
}
}
auc_ = array(NA, dim = c(nCut, nCut, nCond))
wtw_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
aucSD_ = array(NA, dim = c(nCut, nCut, nCond))
wtwSD_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
reRate_ = array(NA, dim = c(nCut, nCut))
for(c1 in 1 : nCut){
for(c2 in 1 : nCut){
paras = meanParas
meanParas[4] = 12
paras[p1] = paraSamples[c1, p1]
paras[p2] = paraSamples[c2, p2]
tempt = simulateUnit(paras, nSim, modelName, cb)
auc_[c1, c2, 1] = tempt$aucHP
auc_[c1, c2, 2] = tempt$aucLP
aucSD_[c1, c2, 1] = tempt$aucHPSD
aucSD_[c1, c2, 2] = tempt$aucLPSD
wtw_[ , c1, c2, 1] = tempt$wtwHP
wtw_[ , c1, c2, 2] = tempt$wtwLP
wtwSD_[ , c1, c2, 1] = tempt$wtwHPSD
wtwSD_[ , c1, c2, 2] = tempt$wtwLPSD
reRate_[c1, c2] = tempt$reRate
}
}
junk = data.frame(rbind(auc_[,,1], auc_[,,2]))
names(junk) = 1:nCut
junk %>% as_tibble() %>%
mutate("condition" = rep(conditions, each = nCut),
"p2" = rep(1:nCut, 2)) %>%
mutate(p2 = as.factor(p2)) %>%
gather(key = p1, value = auc, -condition, -p2) %>%
ggplot(aes(p1, auc, color = p2)) + geom_point() + facet_grid(~condition)
cb
# interactions between paras
cb
# interactions between paras
cb = c("LP", "HP")
auc_ = array(NA, dim = c(nCut, nCut, nCond))
wtw_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
aucSD_ = array(NA, dim = c(nCut, nCut, nCond))
wtwSD_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
reRate_ = array(NA, dim = c(nCut, nCut))
for(c1 in 1 : nCut){
for(c2 in 1 : nCut){
paras = meanParas
paras[p1] = paraSamples[c1, p1]
paras[p2] = paraSamples[c2, p2]
tempt = simulateUnit(paras, nSim, modelName, cb)
auc_[c1, c2, 1] = tempt$aucHP
auc_[c1, c2, 2] = tempt$aucLP
aucSD_[c1, c2, 1] = tempt$aucHPSD
aucSD_[c1, c2, 2] = tempt$aucLPSD
wtw_[ , c1, c2, 1] = tempt$wtwHP
wtw_[ , c1, c2, 2] = tempt$wtwLP
wtwSD_[ , c1, c2, 1] = tempt$wtwHPSD
wtwSD_[ , c1, c2, 2] = tempt$wtwLPSD
reRate_[c1, c2] = tempt$reRate
}
}
junk = data.frame(rbind(auc_[,,1], auc_[,,2]))
names(junk) = 1:nCut
junk %>% as_tibble() %>%
mutate("condition" = rep(conditions, each = nCut),
"p2" = rep(1:nCut, 2)) %>%
mutate(p2 = as.factor(p2)) %>%
gather(key = p1, value = auc, -condition, -p2) %>%
ggplot(aes(p1, auc, color = p2)) + geom_point() + facet_grid(~condition)
paraSamples
junk = data.frame(rbind(auc_[,,1], auc_[,,2]))
names(junk) = 1:nCut
junk %>% as_tibble() %>%
mutate("condition" = rep(conditions, each = nCut),
"p1" = rep(1:nCut, 2))  %>%
gather(key = p2, value = auc, -condition, -p1) %>%
ggplot(aes(p1, auc, color = p2)) + geom_point() + facet_grid(~condition)
str(junk)
# determine paraSamples
nCut = 5
paraSamples = matrix(NA, nrow = nCut, ncol = (nPara-1))
for(i in 1 : (nPara - 1)){
if(i == 2){
junk = expPara[,2] / expPara[,1]
}else{
junk = expPara[,i]
}
qt2 = quantile(junk, 0.2)
qt8 = quantile(junk, 0.8)
paraSamples[,i] = seq(qt2, qt8, length.out = nCut)
}
# simulate
# determine simFun
modelName = "RL2"
cb = c("HP", "LP")
nSim = 5
nCond = length(conditions)
auc_ = array(NA, dim = c(nCut, nCut, nCond))
wtw_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
aucSD_ = array(NA, dim = c(nCut, nCut, nCond))
wtwSD_ = array(NA, dim = c(length(tGrid), nCut, nCut, nCond))
reRate_ = array(NA, dim = c(nCut, nCut))
for(c1 in 1 : nCut){
for(c2 in 1 : nCut){
paras = meanParas
paras[p1] = paraSamples[c1, p1]
paras[p2] = paraSamples[c2, p2]
tempt = simulateUnit(paras, nSim, modelName, cb)
auc_[c1, c2, 1] = tempt$aucHP
auc_[c1, c2, 2] = tempt$aucLP
aucSD_[c1, c2, 1] = tempt$aucHPSD
aucSD_[c1, c2, 2] = tempt$aucLPSD
wtw_[ , c1, c2, 1] = tempt$wtwHP
wtw_[ , c1, c2, 2] = tempt$wtwLP
wtwSD_[ , c1, c2, 1] = tempt$wtwHPSD
wtwSD_[ , c1, c2, 2] = tempt$wtwLPSD
reRate_[c1, c2] = tempt$reRate
}
}
junk = data.frame(rbind(auc_[,,1], auc_[,,2]))
names(junk) = 1:nCut
junk %>% as_tibble() %>%
mutate("condition" = rep(conditions, each = nCut),
"p1" = rep(1:nCut, 2))  %>%
gather(key = p2, value = auc, -condition, -p1) %>%
ggplot(aes(p1, auc, color = p2)) + geom_point() + facet_grid(~condition)
source('~/Documents/first_kick/wtw_timing/subFxs/simulationFxs.R', echo=TRUE)
