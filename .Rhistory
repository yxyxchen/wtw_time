set.seed(123)
for(cutIdx in 1 : nCut){
paras = medianParas
paras[pIdx] = paraSamples[cutIdx,pIdx]
#
wtwMatrixHP = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwMatrixLP = matrix(NA, nrow = length(tGrid), ncol = nSim)
for(smIdx in 1 : nSim){
thisTrialData = simFun(paras, c("LP", "HP"))
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[smIdx, cutIdx] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", )
wtwMatrixHP[, smIdx] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[smIdx, cutIdx] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", )
wtwMatrixLP[, smIdx] = wtwtsResults$timeWTW
}
wtwHP_[[cutIdx]] = wtwMatrixHP
wtwLP_[[cutIdx]] = wtwMatrixLP
}
thisTrialData$sellTime
a = thisTrialData[thisTrialData$condition == "LP",]
a$sellTime
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F)
# initialize
pIdx = 1
aucHP_ = matrix(NA, nrow = nSim, ncol = nCut)
aucLP_ = matrix(NA, nrow = nSim, ncol = nCut)
wtwHP_ = list()
wtwLP_ = list()
set.seed(123)
for(cutIdx in 1 : nCut){
paras = medianParas
paras[pIdx] = paraSamples[cutIdx,pIdx]
#
wtwMatrixHP = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwMatrixLP = matrix(NA, nrow = length(tGrid), ncol = nSim)
for(smIdx in 1 : nSim){
thisTrialData = simFun(paras, c("LP", "HP"))
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[smIdx, cutIdx] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwMatrixHP[, smIdx] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[smIdx, cutIdx] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F)
wtwMatrixLP[, smIdx] = wtwtsResults$timeWTW
}
wtwHP_[[cutIdx]] = wtwMatrixHP
wtwLP_[[cutIdx]] = wtwMatrixLP
}
length(wtwtsResults$timeWTW)
a = thisTrialData[thisTrialData$condition == "LP",]
a$timeWaited
a$sellTime
source('~/Documents/first_kick/wtw_timing/subFxs/simulationFxs.R', echo=TRUE)
# simulate
# determine simFun
simFun = getSimFun("RL2")
nSim = 5
# initialize
pIdx = 1
aucHP_ = matrix(NA, nrow = nSim, ncol = nCut)
aucLP_ = matrix(NA, nrow = nSim, ncol = nCut)
wtwHP_ = list()
wtwLP_ = list()
set.seed(123)
for(cutIdx in 1 : nCut){
paras = medianParas
paras[pIdx] = paraSamples[cutIdx,pIdx]
#
wtwMatrixHP = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwMatrixLP = matrix(NA, nrow = length(tGrid), ncol = nSim)
for(smIdx in 1 : nSim){
thisTrialData = simFun(paras, c("LP", "HP"))
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[smIdx, cutIdx] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwMatrixHP[, smIdx] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[smIdx, cutIdx] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F)
wtwMatrixLP[, smIdx] = wtwtsResults$timeWTW
}
wtwHP_[[cutIdx]] = wtwMatrixHP
wtwLP_[[cutIdx]] = wtwMatrixLP
}
View(wtwHP_)
View(aucHP_)
paraSamples
source('~/Documents/first_kick/wtw_timing/subFxs/simulationFxs.R', echo=TRUE)
simulateUnit = function(paras, nSim){
# loop over participants
library("doMC")
library("foreach")
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
foreach(i = 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, c("LP", "HP"))
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP, MARGIN = 1, mean),
wtwLP = apply(wtwLP, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP, MARGIN = 1, sd))
return(outputs)
}
modelName = "RL2"
cb = c("LP", "HP")
cb
modelName
modelName = "RL2"
cb = c("LP", "HP")
paras
# get simFun
simFun = getSimFun(modelName)
# loop over participants
library("doMC")
library("foreach")
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
foreach(i = 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
foreach(i = 1 : nSim) %dopar% {
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP, MARGIN = 1, mean),
wtwLP = apply(wtwLP, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP, MARGIN = 1, sd))
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
View(outputs)
paras
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
kmscResults$auc
cb = c("LP", "HP")
cb
drawSample
paras = medianParas
wtwLP_
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwtsResults$timeWTW
length(wtwtsResults$timeWTW)
length(tGrid)
apply(wtwHP_, MARGIN = 1, mean)
View(wtwHP_)
foreach(i = 1 : nSim) %dopar% {
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
View(wtwHP_)
aucHP_
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
View(outputs)
apply(wtwHP_, MARGIN = 1, mean)
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
View(outputs)
thisTrialData$scheduledWait
hist(thisTrialData$scheduledWait[thisTrialData$condition == "HP"])
hist(thisTrialData$scheduledWait[thisTrialData$condition == "HP"])
a = vector(length = 100)
seq = c();
for(i in 1:100){
junk = drawSample("unif16", seq)
a[i] = junk$delay
seq = junk$seq
}
seq
a
hist(a)
hist(seq)
a = trialData[[1]]
a$scheduledWait[a$condition == "HP"]
hist(a$scheduledWait[a$condition == "HP"])\
hist(a$scheduledWait[a$condition == "HP"])
hist(a$scheduledWait[a$condition == "HP"])
graphics.off()
hist(a$scheduledWait[a$condition == "HP"])
rm(list = ls())
graphics.off()
# in this dataset, only trials within the 7 mins will be kept. Therefore, we don't need to delete any data
# determine whether use truncated data
isTrun = T
# load libraries
source('subFxs/loadFxs.R') # for loading data
source('subFxs/analysisFxs.R') # for analysis
source("subFxs/plotThemes.R")
library("ggplot2")
library('dplyr')
dir.create("genData")
dir.create("genData/expDataAnalysis")
# load setting parameters
load("wtwSettings.RData")
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
a = trialData[[1]]
hist(a$scheduledWait[a$condition == "HP"])
hist(a$scheduledWait[a$condition == "HP"])
a = trialData[[2]]
hist(a$scheduledWait[a$condition == "HP"])
hist(a$scheduledWait[a$condition == "HP"], breaks = seq(2, 16, by = 2))
hist(a$scheduledWait[a$condition == "HP"], breaks = seq(0, 16, by = 2))
# this script is used to demonstrate the effect of
library('ggplot2')
library('plyr')
library('dplyr')
library('tidyr')
load("wtwSettings.RData")
source('subFxs/repetitionFxs.R') # called by simulate
source("subFxs/helpFxs.R") # getParas
source("subFxs/loadFxs.R") # load scheduledWait from empirical data
source("subFxs/analysisFxs.R")
source("subFxs/plotThemes.R")
# loop over participants
library("doMC")
library("foreach")
nCore = parallel::detectCores() -1 # only for the local computer
registerDoMC(nCore)
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
ids = hdrData$ID
nSub = length(ids)
# load expPara
modelName = "RL2"
paraNames = getParaNames(modelName)
nPara = length(paraNames)
expPara = loadExpPara(paraNames, dirName = sprintf("genData/expModelFitting/%sdb", modelName))
useID = getUseID(expPara, paraNames)
if(length(useID) != nSub){
cat("The model doesn't converge completely!")
}
# determine paraSamples
nCut = 10
paraSamples = matrix(NA, nrow = nCut, ncol = nPara)
for(i in 1 : nPara){
junk = expPara[,paraNames[i]]
paraSamples[,i] = seq(min(junk), max(junk), length.out = nCut)
}
# median paras
medianParas = sapply(1 : nPara, function(i) median(expPara[,i]))
modelName = "RL2"
cb = c("LP", "HP")
# get simFun
simFun = getSimFun(modelName)
source("subFxs/simulationFxs.R")
# get simFun
simFun = getSimFun(modelName)
# initialize outputs
aucHP_ = vector(length = nSim)
nSim = 5
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
paras = medianParas
# get simFun
simFun = getSimFun(modelName)
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
x
source("subFxs/taskFxs.R")
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
mean(aucHP_)
aucLP_
aucHP_
a = thisTrialData[thisTrialData$condition == "HP",]
a$timeWaited
paras
cb = c("HP", "LP")
simulateUnit = function(paras, nSim, modelName, cb){
# get simFun
simFun = getSimFun(modelName)
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
return(outputs)
}
cb = c("HP", "LP")
# get simFun
simFun = getSimFun(modelName)
# initialize outputs
aucHP_ = vector(length = nSim)
aucLP_ = vector(length = nSim)
wtwHP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
wtwLP_ = matrix(NA, nrow = length(tGrid), ncol = nSim)
# usually can not use foreach to fill a matrix or a vector
for(i in 1 : nSim){
set.seed(i)
thisTrialData = simFun(paras, cb)
# HP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "HP",], min(tMaxs), "", F, kmGrid)
aucHP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "HP",], tGrid, min(tMaxs), "", F )
wtwHP_[,i] = wtwtsResults$timeWTW
# LP
kmscResults = kmsc(thisTrialData[thisTrialData$condition == "LP",], min(tMaxs), "", F, kmGrid)
aucLP_[i] = kmscResults$auc
wtwtsResults = wtwTS(thisTrialData[thisTrialData$condition == "LP",], tGrid, min(tMaxs), "", F )
wtwLP_[,i] = wtwtsResults$timeWTW
}
# summarise
outputs = list(aucHP = mean(aucHP_),
aucLP = mean(aucLP_),
aucHPSD = sd(aucHP_),
aucLPSD = sd(aucLP_),
wtwHP = apply(wtwHP_, MARGIN = 1, mean),
wtwLP = apply(wtwLP_, MARGIN = 1, mean),
wtwHPSD = apply(wtwHP_, MARGIN = 1, sd),
wtwLPSD = apply(wtwHP_, MARGIN = 1, sd))
aucHP
aucHP_
aucLP_
